syntax = "proto3";

package catalog;
option go_package = "pb/catalog";

// import "google/protobuf/wrappers.proto";
// import "google/protobuf/timestamp.proto";

message Category {
  int64 id = 1;
  int64 store_id = 2;
  int64 parent_id = 3;
  string slug = 4;
  string name = 5;
  string description = 6;
  string meta_title = 7;
  string meta_description = 8;
  string meta_keywords = 9;
  int64 sort_order = 10;
  int64 depth = 11;
}

message CategoryPair {
  string slug = 1;
  string name = 2;
}

message Product {
  int64 id = 1;
  int64 store_id = 2;
  string slug = 3;
  string name = 4;
  string short_description = 5;
  string description = 6;
  string meta_title = 7;
  string meta_description = 8;
  string meta_keywords = 9;
  bool promotionable = 10;
  string available_on = 11;
  string discontinue_on = 12;
  repeated Variant variants = 13;
  Asset default_image = 14;
  repeated Asset images = 15;
  repeated CategoryPair categories = 16;
}

message Variant {
  int64 id = 1;
  int64 store_id = 2;
  int64 product_id = 3;
  bool is_default = 4;
  string sku = 5;
  int32 sort_order = 6;
  int64 cost_amount = 7;
  string cost_currency = 8;
  bool track_inventory = 9;
  int64 tax_category_id = 10;
  int64 shipping_category_id = 11;
  string discontinue_on = 12;
  double weight = 13;
  double height = 14;
  double width = 15;
  double depth = 16;
  Price price = 17;
}

message Price {
  int64 id = 1;
  int64 store_id = 2;
  int64 variant_id = 3;
  int64 sale_price = 4;
  int64 retail_price = 5;
  string currency = 6;
}

enum AssetKind {
  unknown = 0;
  image = 1;
  document = 2;
  audio = 3;
  video = 4;
  archive = 5;
}

message Asset {
  int64 id = 1;
  int64 store_id = 2;
  int64 product_id = 3;
  int64 variant_id = 4;
  string name = 5;
  string display_name = 6;
  string url = 7;
  AssetKind kind = 8;
  string content_type = 9;
  int64 sort_order = 10;
  map<string, string> sizes = 11;
}

//
//
//
// Requests & Responses
//

// get all categories
message GetAllCategoriesRequest {
  int64 store_id = 1;
}

message GetAllCategoriesResponse {
  repeated Category categories = 1;
}

// get category by slug
message GetCategoryBySlugRequest {
  string slug = 1;
  int64 store_id = 2;
}

message GetCategoryBySlugResponse {
  Category category = 1;
}

// get category by id
message GetCategoryByIdRequest {
  int64 id = 1;
  int64 store_id = 2;
}

message GetCategoryByIdResponse {
  Category category = 1;
}

// create category
message CreateCategoryRequest {
  Category category = 1;
  int64 store_id = 2;
}

message CreateCategoryResponse {
  Category category = 1;
}

// update category
message UpdateCategoryRequest {
  int64 id = 1;
  int64 store_id = 2;
  Category category = 3;
}

message UpdateCategoryResponse {
  Category category = 1;
}

// delete category
message DeleteCategoryRequest {
  int64 id = 1;
  int64 store_id = 2;
}

message DeleteCategoryResponse {}

//
//
// Products
//
//

// get one by sku
message GetProductBySkuRequest {
  string sku = 1;
  int64 store_id = 2;
}

message GetProductBySkuResponse {
  Product product = 1;
}

// get one by slug
message GetProductBySlugRequest {
  string slug = 1;
  int64 store_id = 2;
}

message GetProductBySlugResponse {
  Product product = 1;
}

// get one by id
message GetProductByIdRequest {
  int64 id = 1;
  int64 store_id = 2;
}

message GetProductByIdResponse {
  Product product = 1;
}

// get all by category id
message GetProductsByCategoryIdRequest {
  int64 store_id = 1;
  int64 category_id = 2;
  int64 current_page = 3;
  int64 page_size = 4;
  string filter = 5;
  string sort_on = 6;
}

message GetProductsByCategoryIdResponse {
  repeated Product products = 1;
  int64 total_records = 2;
  int64 total_pages = 3;
}

// get all by category slug
message GetProductsByCategorySlugRequest {
  int64 store_id = 1;
  string category_slug = 2;
  int64 current_page = 3;
  int64 page_size = 4;
  string filter = 5;
}

message GetProductsByCategorySlugResponse {
  repeated Product products = 1;
  int64 total_records = 2;
  int64 total_pages = 3;
}

// get all products
message GetAllProductsRequest {
  int64 store_id = 1;
  int64 current_page = 2;
  int64 page_size = 3;
  string filter = 4;
}

message GetAllProductsResponse {
  repeated Product products = 1;
  int64 total_records = 2;
  int64 total_pages = 3;
}

// create product
message CreateProductRequest {
  int64 store_id = 1;
  Product product = 2;
}

message CreateProductResponse {
  Product product = 1;
}

// update product
message UpdateProductRequest {
  int64 id = 1;
  int64 store_id = 2;
  Product product = 3;
}

message UpdateProductResponse {
  Product product = 1;
}

// delete product
message DeleteProductRequest {
  int64 id = 1;
  int64 store_id = 2;
}

message DeleteProductResponse {}

// images/files/etc
message UploadAssetRequest {
  oneof data {
    Asset asset = 1;
    bytes chunk = 2;
  };
}

// client
service CatalogClient {
  // categories
  rpc GetAllCategories(GetAllCategoriesRequest)
      returns (GetAllCategoriesResponse);
  rpc GetCategoryBySlug(GetCategoryBySlugRequest)
      returns (GetCategoryBySlugResponse);
  rpc GetCategoryById(GetCategoryByIdRequest) returns (GetCategoryByIdResponse);
  rpc CreateCategory(CreateCategoryRequest) returns (CreateCategoryResponse);
  rpc UpdateCategory(UpdateCategoryRequest) returns (UpdateCategoryResponse);
  rpc DeleteCategory(DeleteCategoryRequest) returns (DeleteCategoryResponse);

  // products
  rpc GetProductBySku(GetProductBySkuRequest) returns (GetProductBySkuResponse);
  rpc GetProductBySlug(GetProductBySlugRequest)
      returns (GetProductBySlugResponse);
  rpc GetProductById(GetProductByIdRequest) returns (GetProductByIdResponse);
  rpc GetProductsByCategoryId(GetProductsByCategoryIdRequest)
      returns (GetProductsByCategoryIdResponse);
  rpc GetProductsByCategorySlug(GetProductsByCategorySlugRequest)
      returns (GetProductsByCategorySlugResponse);
  rpc GetAllProducts(GetAllProductsRequest) returns (GetAllProductsResponse);

  rpc CreateProduct(CreateProductRequest) returns (CreateProductResponse);
  rpc UpdateProduct(UpdateProductRequest) returns (UpdateProductResponse);
  rpc DeleteProduct(DeleteProductRequest) returns (DeleteProductResponse);

  rpc UploadAsset(stream UploadAssetRequest) returns (Asset);
}