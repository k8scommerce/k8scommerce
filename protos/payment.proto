syntax = "proto3";

package payment;
option go_package = "pb/payment";

import "google/protobuf/timestamp.proto";
import "customer.proto";

enum TransactionKind {
  Unknown = 0;
  Sale = 1;
  Refund = 2;
  Credit = 3;
  Chargeback = 4;
}

message CreditCard {
  string cardNumber = 1;
  int32 cvc = 2;
  int32 creditCardExpirationYear = 3;
  int32 creditCardExpirationMonth = 4;
}

message Transaction {
  int64 id = 1;
  int64 storeId = 2;
  int64 gatewayId = 3;
  string referenceCode = 4;
  string authCode = 5;
  string response = 6;
  int64 amount = 7;
  string currency = 8;
  TransactionKind kind = 9;
  bool isRecurring = 10;
  google.protobuf.Timestamp expiresAt = 11;
  google.protobuf.Timestamp createdAt = 12;
}

//
//
//
// Requests & Responses
//

// process payment
message ProcessPaymentRequest {
  int64 amount = 1;
  CreditCard creditCard = 2;
  customer.Address billingAddress = 3;
}

message ProcessPaymentResponse {
  string transactionId = 1;
}

// get transactions
message GetTransactionsRequest {
  int64 storeId = 1;
  int64 currentPage = 2;
  int64 pageSize = 3;
  string sortOn = 4;
}

message GetTransactionsResponse {
  repeated Transaction transactions = 1;
  int64 totalRecords = 2;
  int64 totalPages = 3;
  int64 statusCode = 4;
  string statusMessage = 5;
}

// get transaction by id
message GetTranscationByIdRequest {
  int64 storeId = 1;
  int64 currentPage = 2;
  int64 pageSize = 3;
  string sortOn = 4;
}

message GetTranscationByIdResponse {
  Transaction transactions = 1;
  int64 totalRecords = 2;
  int64 totalPages = 3;
  int64 statusCode = 4;
  string statusMessage = 5;
}

// search transactions
message SearchTransactionsRequest {
  int64 storeId = 1;
  string searchtOn = 2;
  int64 currentPage = 3;
  int64 pageSize = 4;
  string sortOn = 5;
}

message SearchTransactionsResponse {
  Transaction transactions = 1;
  int64 totalRecords = 2;
  int64 totalPages = 3;
  int64 statusCode = 4;
  string statusMessage = 5;
}

service PaymentClient {
  rpc ProcessPayment(ProcessPaymentRequest) returns (ProcessPaymentResponse);
  rpc GetTransactions(ProcessPaymentRequest) returns (ProcessPaymentResponse);
  rpc GetTranscationById(GetTranscationByIdRequest)
      returns (GetTranscationByIdResponse);
  rpc SearchTranscations(SearchTransactionsRequest)
      returns (SearchTransactionsResponse);
}
