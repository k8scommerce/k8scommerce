info(
	title: "Client Gateway API"
	desc: "client gateway api"
	author: "localrivet"
	email: "localrivet"
	version: "1.0.0"
)

// objects

type Cart {
	Item       []Item  `json:"items"`
	TotalPrice float64 `json:"totalPrice"`
}

type Item {
	Sku       string  `json:"variantId"`
	Quantity  int32   `json:"quantity"`
	Price     float64 `json:"price"`
	ExpiresAt string  `json:"expiresAt"`
}

//
// requests & responses
//

// get cart
type GetCartRequest {
	CustomerId string `path:"customerId"`
}

type GetCartResponse {
	Cart          Cart   `json:"cart"`
	StatusCode    int64  `json:"sessionId"`
	StatusMessage string `json:"sessionId"`
}

// add to cart
type CreateCartRequest {
	CustomerId string `path:"customerId"`
}

type CreateCartResponse {
	Cart          Cart   `json:"cart"`
	StatusCode    int64  `json:"sessionId"`
	StatusMessage string `json:"sessionId"`
}

// add to cart
type AddItemToCartRequest {
	CustomerId int64 `json:"customerId"`
	Item       Item  `json:"item"`
}

type AddItemToCartResponse {
	Cart          Cart   `json:"cart"`
	StatusCode    int64  `json:"sessionId"`
	StatusMessage string `json:"sessionId"`
}

// upate cart item quantity
type UpdateCartItemRequest {
	ProductId int64 `json:"productId"`
	VariantId int64 `json:"variantId"`
	Quanity   int32 `json:"quanity"`
}

type UpdateCartItemResponse {
	Cart          Cart   `json:"cart"`
	StatusCode    int64  `json:"statusCode"`
	StatusMessage string `json:"statusMessage"`
}

// remove item
type RemoveCartItemRequest {
	ProductId int64 `json:"productId"`
	VariantId int64 `json:"variantId"`
	Quanity   int32 `json:"quanity"`
}

type RemoveCartItemResponse {
	Cart          Cart   `json:"cart"`
	StatusCode    int64  `json:"statusCode"`
	StatusMessage string `json:"statusMessage"`
}

// clear cart
type ClearCartRequest {
}

type ClearCartResponse {
	StatusCode    int64  `json:"statusCode"`
	StatusMessage string `json:"statusMessage"`
}

//
// endpoints
//

// with middleware
@server(
	jwt: Auth
	middleware: Locale, StoreKey
)
service gateway {
	@doc(
		summary: "creates a shopping cart for the associated customerId. Each customer can only have 1 cart ever."
	)
	@handler createCart
	post /v1/cart/:customerId(CreateCartRequest) returns (CreateCartResponse)

	@doc(
		summary: "returns a shopping cart if one exists"
	)
	@handler getCart
	get /v1/cart/:customerId(GetCartRequest) returns (GetCartResponse)
	
	// @handler addItemToCart
	// post /v1/cart/:customerId/add(AddToCartRequest) returns (AddToCartResponse)
}