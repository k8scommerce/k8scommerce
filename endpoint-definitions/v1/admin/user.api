info(
	title: "User API Endpoints"
	desc: "admin gateway user api endpoints"
	author: "localrivet"
	email: "localrivet"
	version: "1"
)

// objects
type User {
	Id         int64             `json:"id"`                   // user id
	FirstName  string            `json:"first_name"`            // first name
	LastName   string            `json:"last_name"`             // last name
	Email      string            `json:"email"`                // email address
	Password   string            `json:"password,optional"`   // password
	// Attributes map[string]string `json:"attributes,optional"` // password
}

type PermissionGroup {
	Id        int64  `json:"id"`        // permission group id
	GroupName string `json:"group_name"` // groupName
}

type UsersPermissionGroups {
	UserId            int64 `json:"user_id"`            // user id
	PermissionGroupId int64 `json:"permission_group_id"` // permission group id
}

//
// requests & responses
//

// login
type UserLoginRequest {
	Email    string `json:"email"`    // email address
	Password string `json:"password"` // password
}

type UserLoginResponse {
	JwtToken JwtToken `json:"jwt,omitempty"`  // JwtToken object
	User 	 User 	  `json:"user,omitempty"` // User object
	Success  bool 	  `json:"success"` 		 // success bool
}

// get all users
type GetAllUsersRequest {
	CurrentPage int64  `path:"current_page"`
	PageSize    int64  `path:"page_size"`
	SortOn      string `form:"sortOn,optional"`
}

type GetAllUsersResponse {
	Users        []User `json:"users"`
	TotalRecords int64  `json:"total_records"`
	TotalPages   int64  `json:"total_pages"`
}
//
// endpoints
//

@server(
	middleware: Locale
	group: users
)
service admin {
	// login
	@doc(
		summary: "Login"
		description: "login for administration users"
	)
	@handler login
	post /v1/user/login(UserLoginRequest) returns (UserLoginResponse)
}

@server(
	// jwt: Auth
	middleware: Locale
	group: users
)
service admin {
	// get all users
	@doc(
		summary: "Get Users"
		description: "returns all users"
		currentPage: "current page number"
		pageSize: "number of records per page"
	)
	@handler getAllUsers
	get /v1/users/:currentPage/:pageSize(GetAllUsersRequest) returns (GetAllUsersResponse)
	
	// rpc GetAllPermissionGroups(GetAllPermissionGroupsRequest) returns (GetAllPermissionGroupsResponse);
	
}