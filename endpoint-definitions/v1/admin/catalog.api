info(
	title: "Catalog API Endpoints"
	desc: "admin gateway catalog api endpoints"
	author: "localrivet"
	email: "localrivet"
	version: "1"
)

// objects
type Category {
	Id              int64  `json:"id"`                                  // category id
	ParentId        int64  `json:"parent_id"`                           // parent category id. references Category.Id
	Slug            string `json:"slug"`                                // slug name of the category
	Name            string `json:"name"`                                // name of category
	Description     string `json:"description,optional,omitempty"`      // description of category
	MetaTitle       string `json:"meta_title,optional,omitempty"`       // metatag title for SEO
	MetaDescription string `json:"meta_description,optional,omitempty"` // metatag description for SEO
	MetaKeywords    string `json:"meta_keywords,optional,omitempty"`    // metatag keywords for SEO
	Depth           int32  `json:"depth,optional,omitempty"`            // category level depth
	SortOrder       int32  `json:"sort_order,optional,omitempty"`       // sort order of menu items on the same level and same parent id
}

type CategoryPair {
	Slug string `json:"slug"` // slug name of the category
	Name string `json:"name"` // name of category
}

type Product {
	Id               int64          `json:"id"`                                   // product id
	Slug             string         `json:"slug"`                                 // product slug
	Name             string         `json:"name"`                                 // product name
	ShortDescription string         `json:"short_description,optional,omitempty"` // product short description. used in category pages
	Description      string         `json:"description,optional,omitempty"`       // category description
	MetaTitle        string         `json:"meta_title,optional,omitempty"`        // metatag title for SEO
	MetaDescription  string         `json:"meta_description,optional,omitempty"`  // metatag description for SEO
	MetaKeywords     string         `json:"meta_keywords,optional,omitempty"`     // metatag keywords for SEO
	Variants         []Variant      `json:"variants,optional,omitempty"`          // collection of Variant objects
	DefaultImage     Asset          `json:"default_image,optional,omitempty"`     // default Asset object of image type
	Images           []Asset        `json:"images,optional,omitempty"`            // array of Asset objects of image type
	Categories       []CategoryPair `json:"categories,optional,omitempty"`        // array of Asset objects of image type
}

type Variant {
	Id        int64   `json:"id"`                        // variant id
	IsDefault bool    `json:"is_default"`                // is default variant. each product must have exactly 1 default variant
	Sku       string  `json:"sku"`                       // variant sku. usually the product sku with appended identification tags
	Weight    float64 `json:"weight,optional,omitempty"` // variant weight. used in calculating shipping
	Height    float64 `json:"height,optional,omitempty"` // variant height. used in calculating shipping
	Width     float64 `json:"width,optional,omitempty"`  // variant width. used in calculating shipping
	Depth     float64 `json:"depth,optional,omitempty"`  // variant depth. used in calculating shipping
	Price     Price   `json:"price,optional,omitempty"`  // variant Price object
}

type Price {
	Id                   int64   `json:"id,optional,omitempty"`                     // price id
	SalePrice            float64 `json:"sale_price"`                                // sale price
	FormattedSalePrice   string  `json:"formatted_sale_price"`                      // formatted sale price
	RetailPrice          float64 `json:"retail_price,optional,omitempty"`           // retail price
	FormattedRetailPrice string  `json:"formatted_retail_price,optional,omitempty"` // formatted retail price
	Currency             string  `json:"currency,optional,omitempty"`               // currency. example: USD, CAN, etc.
}

type Asset {
	Id          int64             `json:"id,optional,omitempty"`                       // asset id
	ProductId   int64             `json:"product_id,optional,omitempty"`               // product id
	VariantId   int64             `json:"variant_id,optional,omitempty"`               // variant id
	Name        string            `json:"name,optional,omitempty"`                     // asset name
	DisplayName string            `json:"display_name,optional,omitempty"`             // display name
	Url         string            `json:"url,optional,omitempty"`                      // full, public access url
	Kind        int               `json:"kind,optional,omitempty,options=0|1|2|3|4|5"` // asset kind (0=unknown|1=image|2=document|3=audio|4=video|5=archive)
	ContentType string            `json:"content_type,optional,omitempty"`             // content type (mime type)
	SortOrder   int64             `json:"sort_order,optional,omitempty"`               // sort order
	Sizes       map[string]string `json:"sizes,optional,omitempty"`                    // map[tag:string]url:string
}

//
// requests & responses
//
// get all categories
type GetAllCategoriesResponse {
	Categories []Category `json:"categories"` // a collection of Category
}

// get category by slug
type GetCategoryBySlugRequest {
	Slug string `path:"slug"` // slug name of the category
}

// get category by id
type GetCategoryByIdRequest {
	Id int64 `path:"id"` // category id
}

// create category
type CreateCategoryRequest {
	Category Category `json:"category"`
}

// update category
type UpdateCategoryRequest {
	Id       int64    `json:"id"`
	Category Category `json:"category"`
}

// delete category
type DeleteCategoryRequest {
	Id int64 `path:"id"`
}

type DeleteCategoryResponse {
	// ResponseStatus ResponseStatus `json:"status"` // a ResponseStatus object
}

//
//
// Products
//
//

// get product by sku
type GetProductBySkuRequest {
	Sku string `path:"sku"`
}

// get product by slug
type GetProductBySlugRequest {
	Slug string `path:"slug"` // slug name of the category
}

// get product by id
type GetProductByIdRequest {
	Id int64 `path:"id"`
}

// get products by category id
type GetProductsByCategoryIdRequest {
	CategoryId  int64  `path:"category_id"`
	CurrentPage int64  `path:"current_page"`
	PageSize    int64  `path:"page_size"`
	Filter      string `form:"filter,optional,omitempty"`
	SortOn      string `form:"sortOn,optional,omitempty"`
}

type GetProductsByCategoryIdResponse {
	Products     []Product `json:"products"`
	TotalRecords int64     `json:"total_records"`
	TotalPages   int64     `json:"total_pages"`
}

// get all products
type GetAllProductsRequest {
	CurrentPage int64  `path:"current_page"`
	PageSize    int64  `path:"page_size"`
	Filter      string `form:"filter,optional,omitempty"`
	SortOn      string `form:"sortOn,optional,omitempty"`
}

type GetAllProductsResponse {
	Products     []Product `json:"products"`
	TotalRecords int64     `json:"total_records"`
	TotalPages   int64     `json:"total_pages"`
	// ResponseStatus ResponseStatus `json:"status"` // a ResponseStatus object
}

// create product
type CreateProductRequest {
	Product Product `json:"product"`
}

// update product
type UpdateProductRequest {
	Id      int64   `json:"path"`
	Product Product `json:"product"`
}

// delete product
type DeleteProductRequest {
	Id int64 `path:"id"`
}

type DeleteProductResponse {
	// ResponseStatus ResponseStatus `json:"status"` // a ResponseStatus object
}

//
//
// Assets
//
//
type UploadAssetRequest {
	ProductId int64  `path:"product_id"`
	VariantId int64  `path:"variant_id"`
	Kind      string `path:"kind"`
}

//
// endpoints
//

@server(
	// jwt: Auth
	middleware: Locale, StoreKey
	group: categories
)
service admin {
	// categories
	
	@doc(
		summary: "Get All Categories"
		description: "returns all categories belonging to a store"
	)
	@handler getAllCategories
	get /v1/categories returns (GetAllCategoriesResponse)
	
	@doc(
		summary: "Get Category By Slug"
		description: "returns all categories by slug belonging to a store"
		slug: "category slug"
	)
	@handler getCategoryBySlug
	get /v1/category/slug/:slug(GetCategoryBySlugRequest) returns (Category)
	
	@doc(
		summary: "Get Category By Id"
		description: "returns all categories by id belonging to a store"
	)
	@handler getCategoryById
	get /v1/category/:id(GetCategoryByIdRequest) returns (Category)
	
	@doc(
		summary: "Create Category"
		description: "creates a category"
	)
	@handler createCategory
	post /v1/category(CreateCategoryRequest) returns (Category)
	
	@doc(
		summary: "Update Category"
		description: "updates a category"
		id: "category id"
	)
	@handler updateCategory
	put /v1/category/:id(UpdateCategoryRequest) returns (Category)
	
	@doc(
		summary: "Delete Category"
		description: "deletes a category"
		id: "category id"
	)
	@handler deleteCategory
	delete /v1/category/:id(DeleteCategoryRequest) returns (DeleteCategoryResponse)
}

@server(
	// jwt: Auth
	middleware: Locale, Filter, StoreKey
	group: products
)
service admin {
	// products
	
	@doc(
		summary: "Get Product By Sku"
		description: "returns all products by sku belonging to a store"
		sku: "product sku"
	)
	@handler getProductBySku
	get /v1/product/sku/:sku(GetProductBySkuRequest) returns (Product)
	
	@doc(
		summary: "Get Product By Slug"
		description: "returns matching product by slug"
		slug: "product slug"
	)
	@handler getProductBySlug
	get /v1/product/slug/:slug(GetProductBySlugRequest) returns (Product)
	
	@doc(
		summary: "Get Product By Id"
		description: "returns matching product by id"
		id: "product id"
	)
	@handler getProductById
	get /v1/product/:id(GetProductByIdRequest) returns (Product)
	
	@doc(
		summary: "Get Products By Category Id"
		description: "returns all products by category id belonging to a store"
		category_id: "category id"
		current_page: "current page number"
		page_size: "number of records per page"
	)
	@handler getProductsByCategoryId
	get /v1/products/:category_id/:current_page/:page_size(GetProductsByCategoryIdRequest) returns (GetProductsByCategoryIdResponse)
	
	@doc(
		summary: "Get All Products"
		description: "returns all products belonging to a store"
		current_page: "current page number"
		page_size: "number of records per page"
	)
	@handler getAllProducts
	get /v1/products/:current_page/:page_size(GetAllProductsRequest) returns (GetAllProductsResponse)
	
	@doc(
		summary: "Create Product"
		description: "creates a product"
	)
	@handler createProduct
	post /v1/product(CreateProductRequest) returns (Product)
	
	@doc(
		summary: "Update Product"
		description: "updates a product"
		id: "product id"
	)
	@handler updateProduct
	put /v1/product/:id(UpdateProductRequest) returns (Product)
	
	@doc(
		summary: "Delete Product"
		description: "delete a product"
		id: "product id"
	)
	@handler deleteProduct
	delete /v1/product/:id(DeleteProductRequest) returns (DeleteProductResponse)
}

@server(
	// jwt: Auth
	middleware: Locale, Filter, StoreKey
	group: assets
)
service admin {
	@doc(
		summary: "Upload Asset"
		description: "uploads an image, document, audio, video or archive asset"
		product_id: "product id"
		variant_id: "variant id"
	)
	@handler upload
	post /v1/asset/:product_id/:variant_id/:kind(UploadAssetRequest) returns (Asset)
}