info(
	title: "Catalog API Endpoints"
	desc: "admin gateway catalog api endpoints"
	author: "localrivet"
	email: "localrivet"
	version: "1"
)

// objects
type Category {
	Id              int64  `json:"id"`                        // category id
	ParentId        int64  `json:"parentId"`                  // parent category id. references Category.Id
	Slug            string `json:"slug"`                      // slug name of the category
	Name            string `json:"name"`                      // name of category
	Description     string `json:"description"`               // description of category
	MetaTitle       string `json:"metaTitle"`       // metatag title for SEO
	MetaDescription string `json:"metaDescription"` // metatag description for SEO
	MetaKeywords    string `json:"metaKeywords"`    // metatag keywords for SEO
	Depth           int32  `json:"depth"`           // category level depth
	SortOrder       int32  `json:"sortOrder"`                 // sort order of menu items on the same level and same parent id
}

type Product {
	Id               int64     `json:"id"`                        // product id
	Slug             string    `json:"slug"`                      // product slug
	Name             string    `json:"name"`                      // product name
	ShortDescription string    `json:"shortDescription"`          // product short description. used in category pages
	Description      string    `json:"description"`               // category description
	MetaTitle        string    `json:"metaTitle"`       // metatag title for SEO
	MetaDescription  string    `json:"metaDescription"` // metatag description for SEO
	MetaKeywords     string    `json:"metaKeywords"`    // metatag keywords for SEO
	Variants         []Variant `json:"variants"`        // collection of Variant objects
}

type Variant {
	Id        int64   `json:"id"`        // variant id
	IsDefault bool    `json:"isDefault"` // is default variant. each product must have exactly 1 default variant
	Sku       string  `json:"sku"`       // variant sku. usually the product sku with appended identification tags
	Weight    float64 `json:"weight"`    // variant weight. used in calculating shipping
	Height    float64 `json:"height"`    // variant height. used in calculating shipping
	Width     float64 `json:"width"`     // variant width. used in calculating shipping
	Depth     float64 `json:"depth"`     // variant depth. used in calculating shipping
	Price     Price   `json:"price"`     // variant Price object
}

type Price {
	Id                     int64   `json:"id"`                     // price id
	Amount                 float64 `json:"amount"`                 // price amount
	DisplayAmount          string  `json:"displayAmount"`          // price display amount
	CompareAtAmount        float64 `json:"compareAtAmount"`        // price compare amount
	DisplayCompareAtAmount string  `json:"displayCompareAtAmount"` // price display compare amount
	Currency               string  `json:"currency"`               // price currency. example: USD, CAN, etc.
}

//
// requests & responses
//
// get all categories
type GetAllCategoriesRequest {
	StoreId     int64  `path:"storeId"`
	CurrentPage int64  `path:"currentPage"`
	PageSize    int64  `path:"pageSize"`
	SortOn      string `form:"sortOn,optional"`
}

type GetAllCategoriesResponse {
	Categories   []Category `json:"categories"` // a collection of Category
	TotalRecords int64      `json:"totalRecords"`
	TotalPages   int64      `json:"totalPages"`
	// ResponseStatus ResponseStatus `json:"status"` // a ResponseStatus object
}

// get category by slug
type GetCategoryBySlugRequest {
	StoreId int64  `path:"storeId"`
	Slug    string `path:"slug"` // slug name of the category
}

type GetCategoryBySlugResponse {
	Category Category `json:"category"`
	// ResponseStatus ResponseStatus `json:"status"` // a ResponseStatus object
}

// get category by id
type GetCategoryByIdRequest {
	Id      int64 `path:"id"`
}

type GetCategoryByIdResponse {
	Category Category `json:"category"`
	// ResponseStatus ResponseStatus `json:"status"` // a ResponseStatus object
}

// create category
type CreateCategoryRequest {
	StoreId  int64    `path:"storeId"`
	Category Category `json:"category"`
}

type CreateCategoryResponse {
	Category Category `json:"category"`
	// ResponseStatus ResponseStatus `json:"status"` // a ResponseStatus object
}

// update category
type UpdateCategoryRequest {
	StoreId  int64    `path:"storeId"`
	Id       int64    `json:"id"`
	Category Category `json:"category"`
}

type UpdateCategoryResponse {
	Category Category `json:"category"`
	// ResponseStatus ResponseStatus `json:"status"` // a ResponseStatus object
}

// delete category
type DeleteCategoryRequest {
	Id      int64 `path:"id"`
}

type DeleteCategoryResponse {
	// ResponseStatus ResponseStatus `json:"status"` // a ResponseStatus object
}

//
//
// Products
//
//

// get product by sku
type GetProductBySkuRequest {
	Sku string `path:"sku"`
}

// get product by slug
type GetProductBySlugRequest {
	Slug string `path:"slug"` // slug name of the category
}

type GetProductResponse {
	Product Product `json:"product"` // slug name of the category
	// ResponseStatus ResponseStatus `json:"status"` // a ResponseStatus object
}

// get product by id
type GetProductByIdRequest {
	Id int64 `path:"id"`
}

// get products by category id
type GetProductsByCategoryIdRequest {
	CategoryId  int64  `path:"categoryId"`
	CurrentPage int64  `path:"currentPage"`
	PageSize    int64  `path:"pageSize"`
	SortOn      string `form:"sortOn,optional"`
}

type GetProductsByCategoryIdResponse {
	Products     []Product `json:"products"`
	TotalRecords int64     `json:"totalRecords"`
	TotalPages   int64     `json:"totalPages"`
	// ResponseStatus ResponseStatus `json:"status"` // a ResponseStatus object
}

// get all products
type GetAllProductsRequest {
	CurrentPage int64  `path:"currentPage"`
	PageSize    int64  `path:"pageSize"`
	SortOn      string `form:"sortOn,optional"`
}

type GetAllProductsResponse {
	Products     []Product `json:"products"`
	TotalRecords int64     `json:"totalRecords"`
	TotalPages   int64     `json:"totalPages"`
	// ResponseStatus ResponseStatus `json:"status"` // a ResponseStatus object
}

// create product
type CreateProductRequest {
	Product Product `json:"product"`
}

type CreateProductResponse {
	Product Product `json:"product"`
	// ResponseStatus ResponseStatus `json:"status"` // a ResponseStatus object
}

// update product
type UpdateProductRequest {
	Id      int64   `json:"path"`
	Product Product `json:"product"`
}

type UpdateProductResponse {
	Product Product `json:"product"`
	// ResponseStatus ResponseStatus `json:"status"` // a ResponseStatus object
}

// delete product
type DeleteProductRequest {
	Id int64 `path:"id"`
}

type DeleteProductResponse {
	// ResponseStatus ResponseStatus `json:"status"` // a ResponseStatus object
}

//
// endpoints
//

@server(
	// jwt: Auth
	middleware: Locale
	group: Categories
)
service admin {
	// categories
	
	@doc(
		summary: "Get All Categories"
		description: "returns all categories belonging to a store"
	)
	@handler getAllCategories
	get /v1/categories/:storeId/:currentPage/:pageSize(GetAllCategoriesRequest) returns (GetAllCategoriesResponse)
	
	@doc(
		summary: "Get Category By Slug"
		description: "returns all categories by slug belonging to a store"
		slug: "category slug"
	)
	@handler getCategoryBySlug
	get /v1/category/slug/:slug(GetCategoryBySlugRequest) returns (GetCategoryBySlugResponse)
	
	@doc(
		summary: "Get Category By Id"
		description: "returns all categories by id belonging to a store"
		id: "category id"
	)
	@handler getCategoryById
	get /v1/category/:id(GetCategoryByIdRequest) returns (GetCategoryByIdResponse)
	
	@doc(
		summary: "Create Category"
		description: "creates a category"
	)
	@handler createCategory
	post /v1/category(CreateCategoryRequest) returns (CreateCategoryResponse)
	
	@doc(
		summary: "Update Category"
		description: "updates a category"
		id: "category id"
	)
	@handler updateCategory
	put /v1/category/:id(UpdateCategoryRequest) returns (UpdateCategoryResponse)
	
	@doc(
		summary: "Delete Category"
		description: "deletes a category"
		id: "category id"
	)
	@handler deleteCategory
	delete /v1/category/:id(DeleteCategoryRequest) returns (DeleteCategoryResponse)
}

@server(
	// jwt: Auth
	middleware: Locale
	group: Products
)
service admin {
	// products
	
	@doc(
		summary: "Get Product By Sku"
		description: "returns all products by sku belonging to a store"
		sku: "product sku"
	)
	@handler getProductBySku
	get /v1/product/sku/:sku(GetProductBySkuRequest) returns (GetProductResponse)
	
	@doc(
		summary: "Get Product By Slug"
		description: "returns matching product by slug"
		slug: "product slug"
	)
	@handler getProductBySlug
	get /v1/product/slug/:slug(GetProductBySlugRequest) returns (GetProductResponse)
	
	@doc(
		summary: "Get Product By Id"
		description: "returns matching product by id"
		id: "product id"
	)
	@handler getProductById
	get /v1/product/:id(GetProductByIdRequest) returns (GetProductResponse)
	
	@doc(
		summary: "Get Products By Category Id"
		description: "returns all products by category id belonging to a store"
		categoryId: "category id"
		currentPage: "current page number"
		pageSize: "number of records per page"
	)
	@handler getProductsByCategoryId
	get /v1/products/:categoryId/:currentPage/:pageSize(GetProductsByCategoryIdRequest) returns (GetProductsByCategoryIdResponse)
	
	@doc(
		summary: "Get All Products"
		description: "returns all products belonging to a store"
		currentPage: "current page number"
		pageSize: "number of records per page"
	)
	@handler getAllProducts
	get /v1/products/:currentPage/:pageSize(GetAllProductsRequest) returns (GetAllProductsResponse)
	
	@doc(
		summary: "Create Product"
		description: "creates a product"
	)
	@handler createProduct
	post /v1/product(CreateProductRequest) returns (CreateProductResponse)
	
	@doc(
		summary: "Update Product"
		description: "updates a product"
		id: "product id"
	)
	@handler updateProduct
	put /v1/product/:id(UpdateProductRequest) returns (UpdateProductResponse)
	
	@doc(
		summary: "Delete Product"
		description: "delete a product"
		id: "product id"
	)
	@handler deleteProduct
	delete /v1/product/:id(DeleteProductRequest) returns (DeleteProductResponse)
}