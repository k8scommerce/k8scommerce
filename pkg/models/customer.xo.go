package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// Customer represents a row from 'public.customer'.
type Customer struct {
	ID        int64  `json:"id" db:"id"`                 // id
	FirstName string `json:"first_name" db:"first_name"` // first_name
	LastName  string `json:"last_name" db:"last_name"`   // last_name
	Email     string `json:"email" db:"email"`           // email
	Password  string `json:"password" db:"password"`     // password
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the Customer exists in the database.
func (c *Customer) Exists() bool {
	return c._exists
}

// Deleted returns true when the Customer has been marked for deletion from
// the database.
func (c *Customer) Deleted() bool {
	return c._deleted
}

// Insert inserts the Customer to the database.
func (c *Customer) Insert(ctx context.Context, db DB) error {
	switch {
	case c._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case c._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.customer (` +
		`first_name, last_name, email, password` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) RETURNING id`
	// run
	logf(sqlstr, c.FirstName, c.LastName, c.Email, c.Password)
	if err := db.QueryRowContext(ctx, sqlstr, c.FirstName, c.LastName, c.Email, c.Password).Scan(&c.ID); err != nil {
		return logerror(err)
	}
	// set exists
	c._exists = true
	return nil
}

// Update updates a Customer in the database.
func (c *Customer) Update(ctx context.Context, db DB) error {
	switch {
	case !c._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case c._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.customer SET ` +
		`first_name = $1, last_name = $2, email = $3, password = $4 ` +
		`WHERE id = $5`
	// run
	logf(sqlstr, c.FirstName, c.LastName, c.Email, c.Password, c.ID)
	if _, err := db.ExecContext(ctx, sqlstr, c.FirstName, c.LastName, c.Email, c.Password, c.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the Customer to the database.
func (c *Customer) Save(ctx context.Context, db DB) error {
	if c.Exists() {
		return c.Update(ctx, db)
	}
	return c.Insert(ctx, db)
}

// Upsert performs an upsert for Customer.
func (c *Customer) Upsert(ctx context.Context, db DB) error {
	switch {
	case c._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.customer (` +
		`id, first_name, last_name, email, password` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`first_name = EXCLUDED.first_name, last_name = EXCLUDED.last_name, email = EXCLUDED.email, password = EXCLUDED.password `
	// run
	logf(sqlstr, c.ID, c.FirstName, c.LastName, c.Email, c.Password)
	if _, err := db.ExecContext(ctx, sqlstr, c.ID, c.FirstName, c.LastName, c.Email, c.Password); err != nil {
		return logerror(err)
	}
	// set exists
	c._exists = true
	return nil
}

// Delete deletes the Customer from the database.
func (c *Customer) Delete(ctx context.Context, db DB) error {
	switch {
	case !c._exists: // doesn't exist
		return nil
	case c._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.customer ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, c.ID)
	if _, err := db.ExecContext(ctx, sqlstr, c.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	c._deleted = true
	return nil
}

// CustomerByEmail retrieves a row from 'public.customer' as a Customer.
//
// Generated from index 'customer_email_key'.
func CustomerByEmail(ctx context.Context, db DB, email string) (*Customer, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, first_name, last_name, email, password ` +
		`FROM public.customer ` +
		`WHERE email = $1`
	// run
	logf(sqlstr, email)
	c := Customer{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, email).Scan(&c.ID, &c.FirstName, &c.LastName, &c.Email, &c.Password); err != nil {
		return nil, logerror(err)
	}
	return &c, nil
}

// CustomerByID retrieves a row from 'public.customer' as a Customer.
//
// Generated from index 'customer_pkey'.
func CustomerByID(ctx context.Context, db DB, id int64) (*Customer, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, first_name, last_name, email, password ` +
		`FROM public.customer ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	c := Customer{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&c.ID, &c.FirstName, &c.LastName, &c.Email, &c.Password); err != nil {
		return nil, logerror(err)
	}
	return &c, nil
}
