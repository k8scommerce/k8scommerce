package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// ArchetypeCategory represents a row from 'public.archetype_category'.
type ArchetypeCategory struct {
	ArchetypeID int64 `json:"archetype_id" db:"archetype_id"` // archetype_id
	CategoryID  int64 `json:"category_id" db:"category_id"`   // category_id
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the ArchetypeCategory exists in the database.
func (ac *ArchetypeCategory) Exists() bool {
	return ac._exists
}

// Deleted returns true when the ArchetypeCategory has been marked for deletion from
// the database.
func (ac *ArchetypeCategory) Deleted() bool {
	return ac._deleted
}

// Insert inserts the ArchetypeCategory to the database.
func (ac *ArchetypeCategory) Insert(ctx context.Context, db DB) error {
	switch {
	case ac._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case ac._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO public.archetype_category (` +
		`archetype_id, category_id` +
		`) VALUES (` +
		`$1, $2` +
		`)`
	// run
	logf(sqlstr, ac.ArchetypeID, ac.CategoryID)
	if _, err := db.ExecContext(ctx, sqlstr, ac.ArchetypeID, ac.CategoryID); err != nil {
		return logerror(err)
	}
	// set exists
	ac._exists = true
	return nil
}

// ------ NOTE: Update statements omitted due to lack of fields other than primary key ------

// Delete deletes the ArchetypeCategory from the database.
func (ac *ArchetypeCategory) Delete(ctx context.Context, db DB) error {
	switch {
	case !ac._exists: // doesn't exist
		return nil
	case ac._deleted: // deleted
		return nil
	}
	// delete with composite primary key
	const sqlstr = `DELETE FROM public.archetype_category ` +
		`WHERE archetype_id = $1 AND category_id = $2`
	// run
	logf(sqlstr, ac.ArchetypeID, ac.CategoryID)
	if _, err := db.ExecContext(ctx, sqlstr, ac.ArchetypeID, ac.CategoryID); err != nil {
		return logerror(err)
	}
	// set deleted
	ac._deleted = true
	return nil
}

// ArchetypeCategoryByArchetypeIDCategoryID retrieves a row from 'public.archetype_category' as a ArchetypeCategory.
//
// Generated from index 'archetype_category_pkey'.
func ArchetypeCategoryByArchetypeIDCategoryID(ctx context.Context, db DB, archetypeID, categoryID int64) (*ArchetypeCategory, error) {
	// query
	const sqlstr = `SELECT ` +
		`archetype_id, category_id ` +
		`FROM public.archetype_category ` +
		`WHERE archetype_id = $1 AND category_id = $2`
	// run
	logf(sqlstr, archetypeID, categoryID)
	ac := ArchetypeCategory{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, archetypeID, categoryID).Scan(&ac.ArchetypeID, &ac.CategoryID); err != nil {
		return nil, logerror(err)
	}
	return &ac, nil
}

// Archetype returns the Archetype associated with the ArchetypeCategory's (ArchetypeID).
//
// Generated from foreign key 'archetype_category_archetype_id_fkey'.
func (ac *ArchetypeCategory) Archetype(ctx context.Context, db DB) (*Archetype, error) {
	return ArchetypeByID(ctx, db, ac.ArchetypeID)
}

// Category returns the Category associated with the ArchetypeCategory's (CategoryID).
//
// Generated from foreign key 'archetype_category_category_id_fkey'.
func (ac *ArchetypeCategory) Category(ctx context.Context, db DB) (*Category, error) {
	return CategoryByID(ctx, db, ac.CategoryID)
}
