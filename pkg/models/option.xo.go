package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// Option represents a row from 'public.option'.
type Option struct {
	ID          int64  `json:"id" db:"id"`                     // id
	Name        string `json:"name" db:"name"`                 // name
	DisplayName string `json:"display_name" db:"display_name"` // display_name
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the Option exists in the database.
func (o *Option) Exists() bool {
	return o._exists
}

// Deleted returns true when the Option has been marked for deletion from
// the database.
func (o *Option) Deleted() bool {
	return o._deleted
}

// Insert inserts the Option to the database.
func (o *Option) Insert(ctx context.Context, db DB) error {
	switch {
	case o._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case o._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.option (` +
		`name, display_name` +
		`) VALUES (` +
		`$1, $2` +
		`) RETURNING id`
	// run
	logf(sqlstr, o.Name, o.DisplayName)
	if err := db.QueryRowContext(ctx, sqlstr, o.Name, o.DisplayName).Scan(&o.ID); err != nil {
		return logerror(err)
	}
	// set exists
	o._exists = true
	return nil
}

// Update updates a Option in the database.
func (o *Option) Update(ctx context.Context, db DB) error {
	switch {
	case !o._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case o._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.option SET ` +
		`name = $1, display_name = $2 ` +
		`WHERE id = $3`
	// run
	logf(sqlstr, o.Name, o.DisplayName, o.ID)
	if _, err := db.ExecContext(ctx, sqlstr, o.Name, o.DisplayName, o.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the Option to the database.
func (o *Option) Save(ctx context.Context, db DB) error {
	if o.Exists() {
		return o.Update(ctx, db)
	}
	return o.Insert(ctx, db)
}

// Upsert performs an upsert for Option.
func (o *Option) Upsert(ctx context.Context, db DB) error {
	switch {
	case o._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.option (` +
		`id, name, display_name` +
		`) VALUES (` +
		`$1, $2, $3` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`name = EXCLUDED.name, display_name = EXCLUDED.display_name `
	// run
	logf(sqlstr, o.ID, o.Name, o.DisplayName)
	if _, err := db.ExecContext(ctx, sqlstr, o.ID, o.Name, o.DisplayName); err != nil {
		return logerror(err)
	}
	// set exists
	o._exists = true
	return nil
}

// Delete deletes the Option from the database.
func (o *Option) Delete(ctx context.Context, db DB) error {
	switch {
	case !o._exists: // doesn't exist
		return nil
	case o._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.option ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, o.ID)
	if _, err := db.ExecContext(ctx, sqlstr, o.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	o._deleted = true
	return nil
}

// OptionByName retrieves a row from 'public.option' as a Option.
//
// Generated from index 'option_name_key'.
func OptionByName(ctx context.Context, db DB, name string) (*Option, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, name, display_name ` +
		`FROM public.option ` +
		`WHERE name = $1`
	// run
	logf(sqlstr, name)
	o := Option{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, name).Scan(&o.ID, &o.Name, &o.DisplayName); err != nil {
		return nil, logerror(err)
	}
	return &o, nil
}

// OptionByID retrieves a row from 'public.option' as a Option.
//
// Generated from index 'option_pkey'.
func OptionByID(ctx context.Context, db DB, id int64) (*Option, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, name, display_name ` +
		`FROM public.option ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	o := Option{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&o.ID, &o.Name, &o.DisplayName); err != nil {
		return nil, logerror(err)
	}
	return &o, nil
}
