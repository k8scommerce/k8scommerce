package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// Price represents a row from 'public.price'.
type Price struct {
	ID          int64          `json:"id" db:"id"`                     // id
	VariantID   int64          `json:"variant_id" db:"variant_id"`     // variant_id
	SalePrice   int64          `json:"sale_price" db:"sale_price"`     // sale_price
	RetailPrice sql.NullInt64  `json:"retail_price" db:"retail_price"` // retail_price
	Currency    sql.NullString `json:"currency" db:"currency"`         // currency
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the Price exists in the database.
func (p *Price) Exists() bool {
	return p._exists
}

// Deleted returns true when the Price has been marked for deletion from
// the database.
func (p *Price) Deleted() bool {
	return p._deleted
}

// Insert inserts the Price to the database.
func (p *Price) Insert(ctx context.Context, db DB) error {
	switch {
	case p._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case p._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.price (` +
		`variant_id, sale_price, retail_price, currency` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) RETURNING id`
	// run
	logf(sqlstr, p.VariantID, p.SalePrice, p.RetailPrice, p.Currency)
	if err := db.QueryRowContext(ctx, sqlstr, p.VariantID, p.SalePrice, p.RetailPrice, p.Currency).Scan(&p.ID); err != nil {
		return logerror(err)
	}
	// set exists
	p._exists = true
	return nil
}

// Update updates a Price in the database.
func (p *Price) Update(ctx context.Context, db DB) error {
	switch {
	case !p._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case p._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.price SET ` +
		`variant_id = $1, sale_price = $2, retail_price = $3, currency = $4 ` +
		`WHERE id = $5`
	// run
	logf(sqlstr, p.VariantID, p.SalePrice, p.RetailPrice, p.Currency, p.ID)
	if _, err := db.ExecContext(ctx, sqlstr, p.VariantID, p.SalePrice, p.RetailPrice, p.Currency, p.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the Price to the database.
func (p *Price) Save(ctx context.Context, db DB) error {
	if p.Exists() {
		return p.Update(ctx, db)
	}
	return p.Insert(ctx, db)
}

// Upsert performs an upsert for Price.
func (p *Price) Upsert(ctx context.Context, db DB) error {
	switch {
	case p._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.price (` +
		`id, variant_id, sale_price, retail_price, currency` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`variant_id = EXCLUDED.variant_id, sale_price = EXCLUDED.sale_price, retail_price = EXCLUDED.retail_price, currency = EXCLUDED.currency `
	// run
	logf(sqlstr, p.ID, p.VariantID, p.SalePrice, p.RetailPrice, p.Currency)
	if _, err := db.ExecContext(ctx, sqlstr, p.ID, p.VariantID, p.SalePrice, p.RetailPrice, p.Currency); err != nil {
		return logerror(err)
	}
	// set exists
	p._exists = true
	return nil
}

// Delete deletes the Price from the database.
func (p *Price) Delete(ctx context.Context, db DB) error {
	switch {
	case !p._exists: // doesn't exist
		return nil
	case p._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.price ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, p.ID)
	if _, err := db.ExecContext(ctx, sqlstr, p.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	p._deleted = true
	return nil
}

// PriceByVariantID retrieves a row from 'public.price' as a Price.
//
// Generated from index 'idx_price_variant_id'.
func PriceByVariantID(ctx context.Context, db DB, variantID int64) ([]*Price, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, variant_id, sale_price, retail_price, currency ` +
		`FROM public.price ` +
		`WHERE variant_id = $1`
	// run
	logf(sqlstr, variantID)
	rows, err := db.QueryContext(ctx, sqlstr, variantID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Price
	for rows.Next() {
		p := Price{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&p.ID, &p.VariantID, &p.SalePrice, &p.RetailPrice, &p.Currency); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &p)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// PriceByID retrieves a row from 'public.price' as a Price.
//
// Generated from index 'price_pkey'.
func PriceByID(ctx context.Context, db DB, id int64) (*Price, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, variant_id, sale_price, retail_price, currency ` +
		`FROM public.price ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	p := Price{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&p.ID, &p.VariantID, &p.SalePrice, &p.RetailPrice, &p.Currency); err != nil {
		return nil, logerror(err)
	}
	return &p, nil
}

// Variant returns the Variant associated with the Price's (VariantID).
//
// Generated from foreign key 'price_variant_id_fkey'.
func (p *Price) Variant(ctx context.Context, db DB) (*Variant, error) {
	return VariantByID(ctx, db, p.VariantID)
}
