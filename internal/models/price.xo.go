package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// Price represents a row from 'public.price'.
type Price struct {
	ID              int64          `json:"id" db:"id"`                               // id
	VariantID       int64          `json:"variant_id" db:"variant_id"`               // variant_id
	Amount          int64          `json:"amount" db:"amount"`                       // amount
	CompareAtAmount sql.NullInt64  `json:"compare_at_amount" db:"compare_at_amount"` // compare_at_amount
	Currency        sql.NullString `json:"currency" db:"currency"`                   // currency
	UserRoleID      sql.NullInt64  `json:"user_role_id" db:"user_role_id"`           // user_role_id
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the Price exists in the database.
func (p *Price) Exists() bool {
	return p._exists
}

// Deleted returns true when the Price has been marked for deletion from
// the database.
func (p *Price) Deleted() bool {
	return p._deleted
}

// Insert inserts the Price to the database.
func (p *Price) Insert(ctx context.Context, db DB) error {
	switch {
	case p._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case p._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.price (` +
		`variant_id, amount, compare_at_amount, currency, user_role_id` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) RETURNING id`
	// run
	logf(sqlstr, p.VariantID, p.Amount, p.CompareAtAmount, p.Currency, p.UserRoleID)
	if err := db.QueryRowContext(ctx, sqlstr, p.VariantID, p.Amount, p.CompareAtAmount, p.Currency, p.UserRoleID).Scan(&p.ID); err != nil {
		return logerror(err)
	}
	// set exists
	p._exists = true
	return nil
}

// Update updates a Price in the database.
func (p *Price) Update(ctx context.Context, db DB) error {
	switch {
	case !p._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case p._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.price SET ` +
		`variant_id = $1, amount = $2, compare_at_amount = $3, currency = $4, user_role_id = $5 ` +
		`WHERE id = $6`
	// run
	logf(sqlstr, p.VariantID, p.Amount, p.CompareAtAmount, p.Currency, p.UserRoleID, p.ID)
	if _, err := db.ExecContext(ctx, sqlstr, p.VariantID, p.Amount, p.CompareAtAmount, p.Currency, p.UserRoleID, p.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the Price to the database.
func (p *Price) Save(ctx context.Context, db DB) error {
	if p.Exists() {
		return p.Update(ctx, db)
	}
	return p.Insert(ctx, db)
}

// Upsert performs an upsert for Price.
func (p *Price) Upsert(ctx context.Context, db DB) error {
	switch {
	case p._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.price (` +
		`id, variant_id, amount, compare_at_amount, currency, user_role_id` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`variant_id = EXCLUDED.variant_id, amount = EXCLUDED.amount, compare_at_amount = EXCLUDED.compare_at_amount, currency = EXCLUDED.currency, user_role_id = EXCLUDED.user_role_id `
	// run
	logf(sqlstr, p.ID, p.VariantID, p.Amount, p.CompareAtAmount, p.Currency, p.UserRoleID)
	if _, err := db.ExecContext(ctx, sqlstr, p.ID, p.VariantID, p.Amount, p.CompareAtAmount, p.Currency, p.UserRoleID); err != nil {
		return logerror(err)
	}
	// set exists
	p._exists = true
	return nil
}

// Delete deletes the Price from the database.
func (p *Price) Delete(ctx context.Context, db DB) error {
	switch {
	case !p._exists: // doesn't exist
		return nil
	case p._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.price ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, p.ID)
	if _, err := db.ExecContext(ctx, sqlstr, p.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	p._deleted = true
	return nil
}

// PriceByID retrieves a row from 'public.price' as a Price.
//
// Generated from index 'price_pkey'.
func PriceByID(ctx context.Context, db DB, id int64) (*Price, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, variant_id, amount, compare_at_amount, currency, user_role_id ` +
		`FROM public.price ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	p := Price{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&p.ID, &p.VariantID, &p.Amount, &p.CompareAtAmount, &p.Currency, &p.UserRoleID); err != nil {
		return nil, logerror(err)
	}
	return &p, nil
}

// Variant returns the Variant associated with the Price's (VariantID).
//
// Generated from foreign key 'price_variant_id_fkey'.
func (p *Price) Variant(ctx context.Context, db DB) (*Variant, error) {
	return VariantByID(ctx, db, p.VariantID)
}
