package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// InventoryBrand represents a row from 'public.inventory_brand'.
type InventoryBrand struct {
	ID      int64  `json:"id" db:"id"`             // id
	StoreID int64  `json:"store_id" db:"store_id"` // store_id
	Name    string `json:"name" db:"name"`         // name
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the InventoryBrand exists in the database.
func (ib *InventoryBrand) Exists() bool {
	return ib._exists
}

// Deleted returns true when the InventoryBrand has been marked for deletion from
// the database.
func (ib *InventoryBrand) Deleted() bool {
	return ib._deleted
}

// Insert inserts the InventoryBrand to the database.
func (ib *InventoryBrand) Insert(ctx context.Context, db DB) error {
	switch {
	case ib._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case ib._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.inventory_brand (` +
		`store_id, name` +
		`) VALUES (` +
		`$1, $2` +
		`) RETURNING id`
	// run
	logf(sqlstr, ib.StoreID, ib.Name)
	if err := db.QueryRowContext(ctx, sqlstr, ib.StoreID, ib.Name).Scan(&ib.ID); err != nil {
		return logerror(err)
	}
	// set exists
	ib._exists = true
	return nil
}

// Update updates a InventoryBrand in the database.
func (ib *InventoryBrand) Update(ctx context.Context, db DB) error {
	switch {
	case !ib._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case ib._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.inventory_brand SET ` +
		`store_id = $1, name = $2 ` +
		`WHERE id = $3`
	// run
	logf(sqlstr, ib.StoreID, ib.Name, ib.ID)
	if _, err := db.ExecContext(ctx, sqlstr, ib.StoreID, ib.Name, ib.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the InventoryBrand to the database.
func (ib *InventoryBrand) Save(ctx context.Context, db DB) error {
	if ib.Exists() {
		return ib.Update(ctx, db)
	}
	return ib.Insert(ctx, db)
}

// Upsert performs an upsert for InventoryBrand.
func (ib *InventoryBrand) Upsert(ctx context.Context, db DB) error {
	switch {
	case ib._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.inventory_brand (` +
		`id, store_id, name` +
		`) VALUES (` +
		`$1, $2, $3` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`store_id = EXCLUDED.store_id, name = EXCLUDED.name `
	// run
	logf(sqlstr, ib.ID, ib.StoreID, ib.Name)
	if _, err := db.ExecContext(ctx, sqlstr, ib.ID, ib.StoreID, ib.Name); err != nil {
		return logerror(err)
	}
	// set exists
	ib._exists = true
	return nil
}

// Delete deletes the InventoryBrand from the database.
func (ib *InventoryBrand) Delete(ctx context.Context, db DB) error {
	switch {
	case !ib._exists: // doesn't exist
		return nil
	case ib._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.inventory_brand ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, ib.ID)
	if _, err := db.ExecContext(ctx, sqlstr, ib.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	ib._deleted = true
	return nil
}

// InventoryBrandByID retrieves a row from 'public.inventory_brand' as a InventoryBrand.
//
// Generated from index 'inventory_brand_pkey'.
func InventoryBrandByID(ctx context.Context, db DB, id int64) (*InventoryBrand, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, store_id, name ` +
		`FROM public.inventory_brand ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	ib := InventoryBrand{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&ib.ID, &ib.StoreID, &ib.Name); err != nil {
		return nil, logerror(err)
	}
	return &ib, nil
}
