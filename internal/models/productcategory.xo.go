package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// ProductCategory represents a row from 'public.product_category'.
type ProductCategory struct {
	ProductID  int64 `json:"product_id" db:"product_id"`   // product_id
	CategoryID int64 `json:"category_id" db:"category_id"` // category_id
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the ProductCategory exists in the database.
func (pc *ProductCategory) Exists() bool {
	return pc._exists
}

// Deleted returns true when the ProductCategory has been marked for deletion from
// the database.
func (pc *ProductCategory) Deleted() bool {
	return pc._deleted
}

// Insert inserts the ProductCategory to the database.
func (pc *ProductCategory) Insert(ctx context.Context, db DB) error {
	switch {
	case pc._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case pc._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO public.product_category (` +
		`product_id, category_id` +
		`) VALUES (` +
		`$1, $2` +
		`)`
	// run
	logf(sqlstr, pc.ProductID, pc.CategoryID)
	if _, err := db.ExecContext(ctx, sqlstr, pc.ProductID, pc.CategoryID); err != nil {
		return logerror(err)
	}
	// set exists
	pc._exists = true
	return nil
}

// ------ NOTE: Update statements omitted due to lack of fields other than primary key ------

// Delete deletes the ProductCategory from the database.
func (pc *ProductCategory) Delete(ctx context.Context, db DB) error {
	switch {
	case !pc._exists: // doesn't exist
		return nil
	case pc._deleted: // deleted
		return nil
	}
	// delete with composite primary key
	const sqlstr = `DELETE FROM public.product_category ` +
		`WHERE product_id = $1 AND category_id = $2`
	// run
	logf(sqlstr, pc.ProductID, pc.CategoryID)
	if _, err := db.ExecContext(ctx, sqlstr, pc.ProductID, pc.CategoryID); err != nil {
		return logerror(err)
	}
	// set deleted
	pc._deleted = true
	return nil
}

// ProductCategoryByProductIDCategoryID retrieves a row from 'public.product_category' as a ProductCategory.
//
// Generated from index 'product_category_pkey'.
func ProductCategoryByProductIDCategoryID(ctx context.Context, db DB, productID, categoryID int64) (*ProductCategory, error) {
	// query
	const sqlstr = `SELECT ` +
		`product_id, category_id ` +
		`FROM public.product_category ` +
		`WHERE product_id = $1 AND category_id = $2`
	// run
	logf(sqlstr, productID, categoryID)
	pc := ProductCategory{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, productID, categoryID).Scan(&pc.ProductID, &pc.CategoryID); err != nil {
		return nil, logerror(err)
	}
	return &pc, nil
}

// Category returns the Category associated with the ProductCategory's (CategoryID).
//
// Generated from foreign key 'product_category_category_id_fkey'.
func (pc *ProductCategory) Category(ctx context.Context, db DB) (*Category, error) {
	return CategoryByID(ctx, db, pc.CategoryID)
}

// Product returns the Product associated with the ProductCategory's (ProductID).
//
// Generated from foreign key 'product_category_product_id_fkey'.
func (pc *ProductCategory) Product(ctx context.Context, db DB) (*Product, error) {
	return ProductByID(ctx, db, pc.ProductID)
}
