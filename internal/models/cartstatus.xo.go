package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql/driver"
	"fmt"
)

// CartStatus is the 'cart_status' enum type from schema 'public'.
type CartStatus uint16

// CartStatus values.
const (
	// CartStatusNew is the 'new' cart_status.
	CartStatusNew CartStatus = 1
	// CartStatusCheckout is the 'checkout' cart_status.
	CartStatusCheckout CartStatus = 2
	// CartStatusPaid is the 'paid' cart_status.
	CartStatusPaid CartStatus = 3
	// CartStatusComplete is the 'complete' cart_status.
	CartStatusComplete CartStatus = 4
	// CartStatusAbandoned is the 'abandoned' cart_status.
	CartStatusAbandoned CartStatus = 5
)

// String satisfies the fmt.Stringer interface.
func (cs CartStatus) String() string {
	switch cs {
	case CartStatusNew:
		return "new"
	case CartStatusCheckout:
		return "checkout"
	case CartStatusPaid:
		return "paid"
	case CartStatusComplete:
		return "complete"
	case CartStatusAbandoned:
		return "abandoned"
	}
	return fmt.Sprintf("CartStatus(%d)", cs)
}

// MarshalText marshals CartStatus into text.
func (cs CartStatus) MarshalText() ([]byte, error) {
	return []byte(cs.String()), nil
}

// UnmarshalText unmarshals CartStatus from text.
func (cs *CartStatus) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "new":
		*cs = CartStatusNew
	case "checkout":
		*cs = CartStatusCheckout
	case "paid":
		*cs = CartStatusPaid
	case "complete":
		*cs = CartStatusComplete
	case "abandoned":
		*cs = CartStatusAbandoned
	default:
		return ErrInvalidCartStatus(str)
	}
	return nil
}

// Value satisfies the driver.Valuer interface.
func (cs CartStatus) Value() (driver.Value, error) {
	return cs.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (cs *CartStatus) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return cs.UnmarshalText(buf)
	}
	if buf, ok := v.(string); ok {
		return cs.UnmarshalText([]byte(buf))
	}
	return ErrInvalidCartStatus(fmt.Sprintf("%T", v))
}

// NullCartStatus represents a null 'cart_status' enum for schema 'public'.
type NullCartStatus struct {
	CartStatus CartStatus
	// Valid is true if CartStatus is not null.
	Valid bool
}

// Value satisfies the driver.Valuer interface.
func (ncs NullCartStatus) Value() (driver.Value, error) {
	if !ncs.Valid {
		return nil, nil
	}
	return ncs.CartStatus.Value()
}

// Scan satisfies the sql.Scanner interface.
func (ncs *NullCartStatus) Scan(v interface{}) error {
	if v == nil {
		ncs.CartStatus, ncs.Valid = 0, false
		return nil
	}
	err := ncs.CartStatus.Scan(v)
	ncs.Valid = err == nil
	return err
}

// ErrInvalidCartStatus is the invalid CartStatus error.
type ErrInvalidCartStatus string

// Error satisfies the error interface.
func (err ErrInvalidCartStatus) Error() string {
	return fmt.Sprintf("invalid CartStatus(%s)", string(err))
}
