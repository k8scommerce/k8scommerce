package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// UsersPasswordReset represents a row from 'public.users_password_reset'.
type UsersPasswordReset struct {
	ID         int64        `json:"id" db:"id"`                   // id
	UsersID    int64        `json:"users_id" db:"users_id"`       // users_id
	Token      string       `json:"token" db:"token"`             // token
	RedeemedAt sql.NullTime `json:"redeemed_at" db:"redeemed_at"` // redeemed_at
	ExpiredAt  sql.NullTime `json:"expired_at" db:"expired_at"`   // expired_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the UsersPasswordReset exists in the database.
func (upr *UsersPasswordReset) Exists() bool {
	return upr._exists
}

// Deleted returns true when the UsersPasswordReset has been marked for deletion from
// the database.
func (upr *UsersPasswordReset) Deleted() bool {
	return upr._deleted
}

// Insert inserts the UsersPasswordReset to the database.
func (upr *UsersPasswordReset) Insert(ctx context.Context, db DB) error {
	switch {
	case upr._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case upr._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.users_password_reset (` +
		`users_id, token, redeemed_at, expired_at` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) RETURNING id`
	// run
	logf(sqlstr, upr.UsersID, upr.Token, upr.RedeemedAt, upr.ExpiredAt)
	if err := db.QueryRowContext(ctx, sqlstr, upr.UsersID, upr.Token, upr.RedeemedAt, upr.ExpiredAt).Scan(&upr.ID); err != nil {
		return logerror(err)
	}
	// set exists
	upr._exists = true
	return nil
}

// Update updates a UsersPasswordReset in the database.
func (upr *UsersPasswordReset) Update(ctx context.Context, db DB) error {
	switch {
	case !upr._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case upr._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.users_password_reset SET ` +
		`users_id = $1, token = $2, redeemed_at = $3, expired_at = $4 ` +
		`WHERE id = $5`
	// run
	logf(sqlstr, upr.UsersID, upr.Token, upr.RedeemedAt, upr.ExpiredAt, upr.ID)
	if _, err := db.ExecContext(ctx, sqlstr, upr.UsersID, upr.Token, upr.RedeemedAt, upr.ExpiredAt, upr.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the UsersPasswordReset to the database.
func (upr *UsersPasswordReset) Save(ctx context.Context, db DB) error {
	if upr.Exists() {
		return upr.Update(ctx, db)
	}
	return upr.Insert(ctx, db)
}

// Upsert performs an upsert for UsersPasswordReset.
func (upr *UsersPasswordReset) Upsert(ctx context.Context, db DB) error {
	switch {
	case upr._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.users_password_reset (` +
		`id, users_id, token, redeemed_at, expired_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`users_id = EXCLUDED.users_id, token = EXCLUDED.token, redeemed_at = EXCLUDED.redeemed_at, expired_at = EXCLUDED.expired_at `
	// run
	logf(sqlstr, upr.ID, upr.UsersID, upr.Token, upr.RedeemedAt, upr.ExpiredAt)
	if _, err := db.ExecContext(ctx, sqlstr, upr.ID, upr.UsersID, upr.Token, upr.RedeemedAt, upr.ExpiredAt); err != nil {
		return logerror(err)
	}
	// set exists
	upr._exists = true
	return nil
}

// Delete deletes the UsersPasswordReset from the database.
func (upr *UsersPasswordReset) Delete(ctx context.Context, db DB) error {
	switch {
	case !upr._exists: // doesn't exist
		return nil
	case upr._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.users_password_reset ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, upr.ID)
	if _, err := db.ExecContext(ctx, sqlstr, upr.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	upr._deleted = true
	return nil
}

// UsersPasswordResetByID retrieves a row from 'public.users_password_reset' as a UsersPasswordReset.
//
// Generated from index 'users_password_reset_pkey'.
func UsersPasswordResetByID(ctx context.Context, db DB, id int64) (*UsersPasswordReset, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, users_id, token, redeemed_at, expired_at ` +
		`FROM public.users_password_reset ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	upr := UsersPasswordReset{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&upr.ID, &upr.UsersID, &upr.Token, &upr.RedeemedAt, &upr.ExpiredAt); err != nil {
		return nil, logerror(err)
	}
	return &upr, nil
}

// UsersPasswordResetByToken retrieves a row from 'public.users_password_reset' as a UsersPasswordReset.
//
// Generated from index 'users_password_reset_token_key'.
func UsersPasswordResetByToken(ctx context.Context, db DB, token string) (*UsersPasswordReset, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, users_id, token, redeemed_at, expired_at ` +
		`FROM public.users_password_reset ` +
		`WHERE token = $1`
	// run
	logf(sqlstr, token)
	upr := UsersPasswordReset{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, token).Scan(&upr.ID, &upr.UsersID, &upr.Token, &upr.RedeemedAt, &upr.ExpiredAt); err != nil {
		return nil, logerror(err)
	}
	return &upr, nil
}

// User returns the User associated with the UsersPasswordReset's (UsersID).
//
// Generated from foreign key 'users_password_reset_users_id_fkey'.
func (upr *UsersPasswordReset) User(ctx context.Context, db DB) (*User, error) {
	return UserByID(ctx, db, upr.UsersID)
}
