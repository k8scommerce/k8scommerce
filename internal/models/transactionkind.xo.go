package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql/driver"
	"fmt"
)

// TransactionKind is the 'transaction_kind' enum type from schema 'public'.
type TransactionKind uint16

// TransactionKind values.
const (
	// TransactionKindUnknown is the 'unknown' transaction_kind.
	TransactionKindUnknown TransactionKind = 1
	// TransactionKindSale is the 'sale' transaction_kind.
	TransactionKindSale TransactionKind = 2
	// TransactionKindRefund is the 'refund' transaction_kind.
	TransactionKindRefund TransactionKind = 3
	// TransactionKindChargeback is the 'chargeback' transaction_kind.
	TransactionKindChargeback TransactionKind = 4
)

// String satisfies the fmt.Stringer interface.
func (tk TransactionKind) String() string {
	switch tk {
	case TransactionKindUnknown:
		return "unknown"
	case TransactionKindSale:
		return "sale"
	case TransactionKindRefund:
		return "refund"
	case TransactionKindChargeback:
		return "chargeback"
	}
	return fmt.Sprintf("TransactionKind(%d)", tk)
}

// MarshalText marshals TransactionKind into text.
func (tk TransactionKind) MarshalText() ([]byte, error) {
	return []byte(tk.String()), nil
}

// UnmarshalText unmarshals TransactionKind from text.
func (tk *TransactionKind) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "unknown":
		*tk = TransactionKindUnknown
	case "sale":
		*tk = TransactionKindSale
	case "refund":
		*tk = TransactionKindRefund
	case "chargeback":
		*tk = TransactionKindChargeback
	default:
		return ErrInvalidTransactionKind(str)
	}
	return nil
}

// Value satisfies the driver.Valuer interface.
func (tk TransactionKind) Value() (driver.Value, error) {
	return tk.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (tk *TransactionKind) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return tk.UnmarshalText(buf)
	}
	if buf, ok := v.(string); ok {
		return tk.UnmarshalText([]byte(buf))
	}
	return ErrInvalidTransactionKind(fmt.Sprintf("%T", v))
}

// NullTransactionKind represents a null 'transaction_kind' enum for schema 'public'.
type NullTransactionKind struct {
	TransactionKind TransactionKind
	// Valid is true if TransactionKind is not null.
	Valid bool
}

// Value satisfies the driver.Valuer interface.
func (ntk NullTransactionKind) Value() (driver.Value, error) {
	if !ntk.Valid {
		return nil, nil
	}
	return ntk.TransactionKind.Value()
}

// Scan satisfies the sql.Scanner interface.
func (ntk *NullTransactionKind) Scan(v interface{}) error {
	if v == nil {
		ntk.TransactionKind, ntk.Valid = 0, false
		return nil
	}
	err := ntk.TransactionKind.Scan(v)
	ntk.Valid = err == nil
	return err
}

// ErrInvalidTransactionKind is the invalid TransactionKind error.
type ErrInvalidTransactionKind string

// Error satisfies the error interface.
func (err ErrInvalidTransactionKind) Error() string {
	return fmt.Sprintf("invalid TransactionKind(%s)", string(err))
}
