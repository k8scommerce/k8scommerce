package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// PermissionGroup represents a row from 'public.permission_group'.
type PermissionGroup struct {
	ID        int64  `json:"id" db:"id"`                 // id
	StoreID   int64  `json:"store_id" db:"store_id"`     // store_id
	GroupName string `json:"group_name" db:"group_name"` // group_name
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the PermissionGroup exists in the database.
func (pg *PermissionGroup) Exists() bool {
	return pg._exists
}

// Deleted returns true when the PermissionGroup has been marked for deletion from
// the database.
func (pg *PermissionGroup) Deleted() bool {
	return pg._deleted
}

// Insert inserts the PermissionGroup to the database.
func (pg *PermissionGroup) Insert(ctx context.Context, db DB) error {
	switch {
	case pg._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case pg._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.permission_group (` +
		`store_id, group_name` +
		`) VALUES (` +
		`$1, $2` +
		`) RETURNING id`
	// run
	logf(sqlstr, pg.StoreID, pg.GroupName)
	if err := db.QueryRowContext(ctx, sqlstr, pg.StoreID, pg.GroupName).Scan(&pg.ID); err != nil {
		return logerror(err)
	}
	// set exists
	pg._exists = true
	return nil
}

// Update updates a PermissionGroup in the database.
func (pg *PermissionGroup) Update(ctx context.Context, db DB) error {
	switch {
	case !pg._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case pg._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.permission_group SET ` +
		`store_id = $1, group_name = $2 ` +
		`WHERE id = $3`
	// run
	logf(sqlstr, pg.StoreID, pg.GroupName, pg.ID)
	if _, err := db.ExecContext(ctx, sqlstr, pg.StoreID, pg.GroupName, pg.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the PermissionGroup to the database.
func (pg *PermissionGroup) Save(ctx context.Context, db DB) error {
	if pg.Exists() {
		return pg.Update(ctx, db)
	}
	return pg.Insert(ctx, db)
}

// Upsert performs an upsert for PermissionGroup.
func (pg *PermissionGroup) Upsert(ctx context.Context, db DB) error {
	switch {
	case pg._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.permission_group (` +
		`id, store_id, group_name` +
		`) VALUES (` +
		`$1, $2, $3` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`store_id = EXCLUDED.store_id, group_name = EXCLUDED.group_name `
	// run
	logf(sqlstr, pg.ID, pg.StoreID, pg.GroupName)
	if _, err := db.ExecContext(ctx, sqlstr, pg.ID, pg.StoreID, pg.GroupName); err != nil {
		return logerror(err)
	}
	// set exists
	pg._exists = true
	return nil
}

// Delete deletes the PermissionGroup from the database.
func (pg *PermissionGroup) Delete(ctx context.Context, db DB) error {
	switch {
	case !pg._exists: // doesn't exist
		return nil
	case pg._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.permission_group ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, pg.ID)
	if _, err := db.ExecContext(ctx, sqlstr, pg.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	pg._deleted = true
	return nil
}

// PermissionGroupByGroupName retrieves a row from 'public.permission_group' as a PermissionGroup.
//
// Generated from index 'permission_group_group_name_key'.
func PermissionGroupByGroupName(ctx context.Context, db DB, groupName string) (*PermissionGroup, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, store_id, group_name ` +
		`FROM public.permission_group ` +
		`WHERE group_name = $1`
	// run
	logf(sqlstr, groupName)
	pg := PermissionGroup{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, groupName).Scan(&pg.ID, &pg.StoreID, &pg.GroupName); err != nil {
		return nil, logerror(err)
	}
	return &pg, nil
}

// PermissionGroupByID retrieves a row from 'public.permission_group' as a PermissionGroup.
//
// Generated from index 'permission_group_pkey'.
func PermissionGroupByID(ctx context.Context, db DB, id int64) (*PermissionGroup, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, store_id, group_name ` +
		`FROM public.permission_group ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	pg := PermissionGroup{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&pg.ID, &pg.StoreID, &pg.GroupName); err != nil {
		return nil, logerror(err)
	}
	return &pg, nil
}
