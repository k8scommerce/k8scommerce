package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// Cart represents a row from 'public.cart'.
type Cart struct {
	CustomerID int64 `json:"customer_id" db:"customer_id"` // customer_id
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the Cart exists in the database.
func (c *Cart) Exists() bool {
	return c._exists
}

// Deleted returns true when the Cart has been marked for deletion from
// the database.
func (c *Cart) Deleted() bool {
	return c._deleted
}

// Insert inserts the Cart to the database.
func (c *Cart) Insert(ctx context.Context, db DB) error {
	switch {
	case c._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case c._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO public.cart (` +
		`customer_id` +
		`) VALUES (` +
		`$1` +
		`)`
	// run
	logf(sqlstr, c.CustomerID)
	if _, err := db.ExecContext(ctx, sqlstr, c.CustomerID); err != nil {
		return logerror(err)
	}
	// set exists
	c._exists = true
	return nil
}

// ------ NOTE: Update statements omitted due to lack of fields other than primary key ------

// Delete deletes the Cart from the database.
func (c *Cart) Delete(ctx context.Context, db DB) error {
	switch {
	case !c._exists: // doesn't exist
		return nil
	case c._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.cart ` +
		`WHERE customer_id = $1`
	// run
	logf(sqlstr, c.CustomerID)
	if _, err := db.ExecContext(ctx, sqlstr, c.CustomerID); err != nil {
		return logerror(err)
	}
	// set deleted
	c._deleted = true
	return nil
}

// CartByCustomerID retrieves a row from 'public.cart' as a Cart.
//
// Generated from index 'cart_pkey'.
func CartByCustomerID(ctx context.Context, db DB, customerID int64) (*Cart, error) {
	// query
	const sqlstr = `SELECT ` +
		`customer_id ` +
		`FROM public.cart ` +
		`WHERE customer_id = $1`
	// run
	logf(sqlstr, customerID)
	c := Cart{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, customerID).Scan(&c.CustomerID); err != nil {
		return nil, logerror(err)
	}
	return &c, nil
}
