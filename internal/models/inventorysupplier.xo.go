package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// InventorySupplier represents a row from 'public.inventory_supplier'.
type InventorySupplier struct {
	ID      int64  `json:"id" db:"id"`             // id
	StoreID int64  `json:"store_id" db:"store_id"` // store_id
	Name    string `json:"name" db:"name"`         // name
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the InventorySupplier exists in the database.
func (is *InventorySupplier) Exists() bool {
	return is._exists
}

// Deleted returns true when the InventorySupplier has been marked for deletion from
// the database.
func (is *InventorySupplier) Deleted() bool {
	return is._deleted
}

// Insert inserts the InventorySupplier to the database.
func (is *InventorySupplier) Insert(ctx context.Context, db DB) error {
	switch {
	case is._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case is._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.inventory_supplier (` +
		`store_id, name` +
		`) VALUES (` +
		`$1, $2` +
		`) RETURNING id`
	// run
	logf(sqlstr, is.StoreID, is.Name)
	if err := db.QueryRowContext(ctx, sqlstr, is.StoreID, is.Name).Scan(&is.ID); err != nil {
		return logerror(err)
	}
	// set exists
	is._exists = true
	return nil
}

// Update updates a InventorySupplier in the database.
func (is *InventorySupplier) Update(ctx context.Context, db DB) error {
	switch {
	case !is._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case is._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.inventory_supplier SET ` +
		`store_id = $1, name = $2 ` +
		`WHERE id = $3`
	// run
	logf(sqlstr, is.StoreID, is.Name, is.ID)
	if _, err := db.ExecContext(ctx, sqlstr, is.StoreID, is.Name, is.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the InventorySupplier to the database.
func (is *InventorySupplier) Save(ctx context.Context, db DB) error {
	if is.Exists() {
		return is.Update(ctx, db)
	}
	return is.Insert(ctx, db)
}

// Upsert performs an upsert for InventorySupplier.
func (is *InventorySupplier) Upsert(ctx context.Context, db DB) error {
	switch {
	case is._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.inventory_supplier (` +
		`id, store_id, name` +
		`) VALUES (` +
		`$1, $2, $3` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`store_id = EXCLUDED.store_id, name = EXCLUDED.name `
	// run
	logf(sqlstr, is.ID, is.StoreID, is.Name)
	if _, err := db.ExecContext(ctx, sqlstr, is.ID, is.StoreID, is.Name); err != nil {
		return logerror(err)
	}
	// set exists
	is._exists = true
	return nil
}

// Delete deletes the InventorySupplier from the database.
func (is *InventorySupplier) Delete(ctx context.Context, db DB) error {
	switch {
	case !is._exists: // doesn't exist
		return nil
	case is._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.inventory_supplier ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, is.ID)
	if _, err := db.ExecContext(ctx, sqlstr, is.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	is._deleted = true
	return nil
}

// InventorySupplierByID retrieves a row from 'public.inventory_supplier' as a InventorySupplier.
//
// Generated from index 'inventory_supplier_pkey'.
func InventorySupplierByID(ctx context.Context, db DB, id int64) (*InventorySupplier, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, store_id, name ` +
		`FROM public.inventory_supplier ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	is := InventorySupplier{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&is.ID, &is.StoreID, &is.Name); err != nil {
		return nil, logerror(err)
	}
	return &is, nil
}
