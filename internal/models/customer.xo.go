package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// Customer represents a row from 'public.customer'.
type Customer struct {
	ID         int64          `json:"id" db:"id"`                   // id
	StoreID    int64          `json:"store_id" db:"store_id"`       // store_id
	FirstName  string         `json:"first_name" db:"first_name"`   // first_name
	LastName   string         `json:"last_name" db:"last_name"`     // last_name
	Email      string         `json:"email" db:"email"`             // email
	Password   sql.NullString `json:"password" db:"password"`       // password
	IsVerified bool           `json:"is_verified" db:"is_verified"` // is_verified
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the Customer exists in the database.
func (c *Customer) Exists() bool {
	return c._exists
}

// Deleted returns true when the Customer has been marked for deletion from
// the database.
func (c *Customer) Deleted() bool {
	return c._deleted
}

// Insert inserts the Customer to the database.
func (c *Customer) Insert(ctx context.Context, db DB) error {
	switch {
	case c._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case c._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.customer (` +
		`store_id, first_name, last_name, email, password, is_verified` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`) RETURNING id`
	// run
	logf(sqlstr, c.StoreID, c.FirstName, c.LastName, c.Email, c.Password, c.IsVerified)
	if err := db.QueryRowContext(ctx, sqlstr, c.StoreID, c.FirstName, c.LastName, c.Email, c.Password, c.IsVerified).Scan(&c.ID); err != nil {
		return logerror(err)
	}
	// set exists
	c._exists = true
	return nil
}

// Update updates a Customer in the database.
func (c *Customer) Update(ctx context.Context, db DB) error {
	switch {
	case !c._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case c._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.customer SET ` +
		`store_id = $1, first_name = $2, last_name = $3, email = $4, password = $5, is_verified = $6 ` +
		`WHERE id = $7`
	// run
	logf(sqlstr, c.StoreID, c.FirstName, c.LastName, c.Email, c.Password, c.IsVerified, c.ID)
	if _, err := db.ExecContext(ctx, sqlstr, c.StoreID, c.FirstName, c.LastName, c.Email, c.Password, c.IsVerified, c.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the Customer to the database.
func (c *Customer) Save(ctx context.Context, db DB) error {
	if c.Exists() {
		return c.Update(ctx, db)
	}
	return c.Insert(ctx, db)
}

// Upsert performs an upsert for Customer.
func (c *Customer) Upsert(ctx context.Context, db DB) error {
	switch {
	case c._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.customer (` +
		`id, store_id, first_name, last_name, email, password, is_verified` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`store_id = EXCLUDED.store_id, first_name = EXCLUDED.first_name, last_name = EXCLUDED.last_name, email = EXCLUDED.email, password = EXCLUDED.password, is_verified = EXCLUDED.is_verified `
	// run
	logf(sqlstr, c.ID, c.StoreID, c.FirstName, c.LastName, c.Email, c.Password, c.IsVerified)
	if _, err := db.ExecContext(ctx, sqlstr, c.ID, c.StoreID, c.FirstName, c.LastName, c.Email, c.Password, c.IsVerified); err != nil {
		return logerror(err)
	}
	// set exists
	c._exists = true
	return nil
}

// Delete deletes the Customer from the database.
func (c *Customer) Delete(ctx context.Context, db DB) error {
	switch {
	case !c._exists: // doesn't exist
		return nil
	case c._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.customer ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, c.ID)
	if _, err := db.ExecContext(ctx, sqlstr, c.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	c._deleted = true
	return nil
}

// CustomerByEmail retrieves a row from 'public.customer' as a Customer.
//
// Generated from index 'customer_email_key'.
func CustomerByEmail(ctx context.Context, db DB, email string) (*Customer, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, store_id, first_name, last_name, email, password, is_verified ` +
		`FROM public.customer ` +
		`WHERE email = $1`
	// run
	logf(sqlstr, email)
	c := Customer{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, email).Scan(&c.ID, &c.StoreID, &c.FirstName, &c.LastName, &c.Email, &c.Password, &c.IsVerified); err != nil {
		return nil, logerror(err)
	}
	return &c, nil
}

// CustomerByID retrieves a row from 'public.customer' as a Customer.
//
// Generated from index 'customer_pkey'.
func CustomerByID(ctx context.Context, db DB, id int64) (*Customer, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, store_id, first_name, last_name, email, password, is_verified ` +
		`FROM public.customer ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	c := Customer{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&c.ID, &c.StoreID, &c.FirstName, &c.LastName, &c.Email, &c.Password, &c.IsVerified); err != nil {
		return nil, logerror(err)
	}
	return &c, nil
}

// CustomerByStoreIDEmail retrieves a row from 'public.customer' as a Customer.
//
// Generated from index 'customer_store_id_email_key'.
func CustomerByStoreIDEmail(ctx context.Context, db DB, storeID int64, email string) (*Customer, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, store_id, first_name, last_name, email, password, is_verified ` +
		`FROM public.customer ` +
		`WHERE store_id = $1 AND email = $2`
	// run
	logf(sqlstr, storeID, email)
	c := Customer{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, storeID, email).Scan(&c.ID, &c.StoreID, &c.FirstName, &c.LastName, &c.Email, &c.Password, &c.IsVerified); err != nil {
		return nil, logerror(err)
	}
	return &c, nil
}

// CustomerByStoreID retrieves a row from 'public.customer' as a Customer.
//
// Generated from index 'idx_customer_store_id'.
func CustomerByStoreID(ctx context.Context, db DB, storeID int64) ([]*Customer, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, store_id, first_name, last_name, email, password, is_verified ` +
		`FROM public.customer ` +
		`WHERE store_id = $1`
	// run
	logf(sqlstr, storeID)
	rows, err := db.QueryContext(ctx, sqlstr, storeID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Customer
	for rows.Next() {
		c := Customer{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&c.ID, &c.StoreID, &c.FirstName, &c.LastName, &c.Email, &c.Password, &c.IsVerified); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &c)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}
