package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// PaymentGateway represents a row from 'public.payment_gateway'.
type PaymentGateway struct {
	ID   int64  `json:"id" db:"id"`     // id
	Name string `json:"name" db:"name"` // name
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the PaymentGateway exists in the database.
func (pg *PaymentGateway) Exists() bool {
	return pg._exists
}

// Deleted returns true when the PaymentGateway has been marked for deletion from
// the database.
func (pg *PaymentGateway) Deleted() bool {
	return pg._deleted
}

// Insert inserts the PaymentGateway to the database.
func (pg *PaymentGateway) Insert(ctx context.Context, db DB) error {
	switch {
	case pg._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case pg._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.payment_gateway (` +
		`name` +
		`) VALUES (` +
		`$1` +
		`) RETURNING id`
	// run
	logf(sqlstr, pg.Name)
	if err := db.QueryRowContext(ctx, sqlstr, pg.Name).Scan(&pg.ID); err != nil {
		return logerror(err)
	}
	// set exists
	pg._exists = true
	return nil
}

// Update updates a PaymentGateway in the database.
func (pg *PaymentGateway) Update(ctx context.Context, db DB) error {
	switch {
	case !pg._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case pg._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.payment_gateway SET ` +
		`name = $1 ` +
		`WHERE id = $2`
	// run
	logf(sqlstr, pg.Name, pg.ID)
	if _, err := db.ExecContext(ctx, sqlstr, pg.Name, pg.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the PaymentGateway to the database.
func (pg *PaymentGateway) Save(ctx context.Context, db DB) error {
	if pg.Exists() {
		return pg.Update(ctx, db)
	}
	return pg.Insert(ctx, db)
}

// Upsert performs an upsert for PaymentGateway.
func (pg *PaymentGateway) Upsert(ctx context.Context, db DB) error {
	switch {
	case pg._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.payment_gateway (` +
		`id, name` +
		`) VALUES (` +
		`$1, $2` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`name = EXCLUDED.name `
	// run
	logf(sqlstr, pg.ID, pg.Name)
	if _, err := db.ExecContext(ctx, sqlstr, pg.ID, pg.Name); err != nil {
		return logerror(err)
	}
	// set exists
	pg._exists = true
	return nil
}

// Delete deletes the PaymentGateway from the database.
func (pg *PaymentGateway) Delete(ctx context.Context, db DB) error {
	switch {
	case !pg._exists: // doesn't exist
		return nil
	case pg._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.payment_gateway ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, pg.ID)
	if _, err := db.ExecContext(ctx, sqlstr, pg.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	pg._deleted = true
	return nil
}

// PaymentGatewayByID retrieves a row from 'public.payment_gateway' as a PaymentGateway.
//
// Generated from index 'payment_gateway_pkey'.
func PaymentGatewayByID(ctx context.Context, db DB, id int64) (*PaymentGateway, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, name ` +
		`FROM public.payment_gateway ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	pg := PaymentGateway{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&pg.ID, &pg.Name); err != nil {
		return nil, logerror(err)
	}
	return &pg, nil
}
