package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// Store represents a row from 'public.store'.
type Store struct {
	ID          int64          `json:"id" db:"id"`                   // id
	IsDefault   bool           `json:"is_default" db:"is_default"`   // is_default
	Name        string         `json:"name" db:"name"`               // name
	Description sql.NullString `json:"description" db:"description"` // description
	URL         string         `json:"url" db:"url"`                 // url
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the Store exists in the database.
func (s *Store) Exists() bool {
	return s._exists
}

// Deleted returns true when the Store has been marked for deletion from
// the database.
func (s *Store) Deleted() bool {
	return s._deleted
}

// Insert inserts the Store to the database.
func (s *Store) Insert(ctx context.Context, db DB) error {
	switch {
	case s._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case s._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.store (` +
		`is_default, name, description, url` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) RETURNING id`
	// run
	logf(sqlstr, s.IsDefault, s.Name, s.Description, s.URL)
	if err := db.QueryRowContext(ctx, sqlstr, s.IsDefault, s.Name, s.Description, s.URL).Scan(&s.ID); err != nil {
		return logerror(err)
	}
	// set exists
	s._exists = true
	return nil
}

// Update updates a Store in the database.
func (s *Store) Update(ctx context.Context, db DB) error {
	switch {
	case !s._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case s._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.store SET ` +
		`is_default = $1, name = $2, description = $3, url = $4 ` +
		`WHERE id = $5`
	// run
	logf(sqlstr, s.IsDefault, s.Name, s.Description, s.URL, s.ID)
	if _, err := db.ExecContext(ctx, sqlstr, s.IsDefault, s.Name, s.Description, s.URL, s.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the Store to the database.
func (s *Store) Save(ctx context.Context, db DB) error {
	if s.Exists() {
		return s.Update(ctx, db)
	}
	return s.Insert(ctx, db)
}

// Upsert performs an upsert for Store.
func (s *Store) Upsert(ctx context.Context, db DB) error {
	switch {
	case s._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.store (` +
		`id, is_default, name, description, url` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`is_default = EXCLUDED.is_default, name = EXCLUDED.name, description = EXCLUDED.description, url = EXCLUDED.url `
	// run
	logf(sqlstr, s.ID, s.IsDefault, s.Name, s.Description, s.URL)
	if _, err := db.ExecContext(ctx, sqlstr, s.ID, s.IsDefault, s.Name, s.Description, s.URL); err != nil {
		return logerror(err)
	}
	// set exists
	s._exists = true
	return nil
}

// Delete deletes the Store from the database.
func (s *Store) Delete(ctx context.Context, db DB) error {
	switch {
	case !s._exists: // doesn't exist
		return nil
	case s._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.store ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, s.ID)
	if _, err := db.ExecContext(ctx, sqlstr, s.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	s._deleted = true
	return nil
}

// StoreByNameURL retrieves a row from 'public.store' as a Store.
//
// Generated from index 'store_name_url_key'.
func StoreByNameURL(ctx context.Context, db DB, name, url string) (*Store, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, is_default, name, description, url ` +
		`FROM public.store ` +
		`WHERE name = $1 AND url = $2`
	// run
	logf(sqlstr, name, url)
	s := Store{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, name, url).Scan(&s.ID, &s.IsDefault, &s.Name, &s.Description, &s.URL); err != nil {
		return nil, logerror(err)
	}
	return &s, nil
}

// StoreByID retrieves a row from 'public.store' as a Store.
//
// Generated from index 'store_pkey'.
func StoreByID(ctx context.Context, db DB, id int64) (*Store, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, is_default, name, description, url ` +
		`FROM public.store ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	s := Store{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&s.ID, &s.IsDefault, &s.Name, &s.Description, &s.URL); err != nil {
		return nil, logerror(err)
	}
	return &s, nil
}
