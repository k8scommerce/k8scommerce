package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql/driver"
	"fmt"
)

// AssetKind is the 'asset_kind' enum type from schema 'public'.
type AssetKind uint16

// AssetKind values.
const (
	// AssetKindImage is the 'image' asset_kind.
	AssetKindImage AssetKind = 1
	// AssetKindDocument is the 'document' asset_kind.
	AssetKindDocument AssetKind = 2
	// AssetKindAudio is the 'audio' asset_kind.
	AssetKindAudio AssetKind = 3
	// AssetKindVideo is the 'video' asset_kind.
	AssetKindVideo AssetKind = 4
	// AssetKindArchive is the 'archive' asset_kind.
	AssetKindArchive AssetKind = 5
)

// String satisfies the fmt.Stringer interface.
func (ak AssetKind) String() string {
	switch ak {
	case AssetKindImage:
		return "image"
	case AssetKindDocument:
		return "document"
	case AssetKindAudio:
		return "audio"
	case AssetKindVideo:
		return "video"
	case AssetKindArchive:
		return "archive"
	}
	return fmt.Sprintf("AssetKind(%d)", ak)
}

// MarshalText marshals AssetKind into text.
func (ak AssetKind) MarshalText() ([]byte, error) {
	return []byte(ak.String()), nil
}

// UnmarshalText unmarshals AssetKind from text.
func (ak *AssetKind) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "image":
		*ak = AssetKindImage
	case "document":
		*ak = AssetKindDocument
	case "audio":
		*ak = AssetKindAudio
	case "video":
		*ak = AssetKindVideo
	case "archive":
		*ak = AssetKindArchive
	default:
		return ErrInvalidAssetKind(str)
	}
	return nil
}

// Value satisfies the driver.Valuer interface.
func (ak AssetKind) Value() (driver.Value, error) {
	return ak.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (ak *AssetKind) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return ak.UnmarshalText(buf)
	}
	return ErrInvalidAssetKind(fmt.Sprintf("%T", v))
}

// NullAssetKind represents a null 'asset_kind' enum for schema 'public'.
type NullAssetKind struct {
	AssetKind AssetKind
	// Valid is true if AssetKind is not null.
	Valid bool
}

// Value satisfies the driver.Valuer interface.
func (nak NullAssetKind) Value() (driver.Value, error) {
	if !nak.Valid {
		return nil, nil
	}
	return nak.AssetKind.Value()
}

// Scan satisfies the sql.Scanner interface.
func (nak *NullAssetKind) Scan(v interface{}) error {
	if v == nil {
		nak.AssetKind, nak.Valid = 0, false
		return nil
	}
	err := nak.AssetKind.Scan(v)
	nak.Valid = err == nil
	return err
}

// ErrInvalidAssetKind is the invalid AssetKind error.
type ErrInvalidAssetKind string

// Error satisfies the error interface.
func (err ErrInvalidAssetKind) Error() string {
	return fmt.Sprintf("invalid AssetKind(%s)", string(err))
}
