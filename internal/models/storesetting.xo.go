package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// StoreSetting represents a row from 'public.store_setting'.
type StoreSetting struct {
	ID                         int64          `json:"id" db:"id"`                                                       // id
	StoreID                    int64          `json:"store_id" db:"store_id"`                                           // store_id
	SeoTitle                   sql.NullString `json:"seo_title" db:"seo_title"`                                         // seo_title
	SeoRobots                  sql.NullString `json:"seo_robots" db:"seo_robots"`                                       // seo_robots
	MetaDescription            sql.NullString `json:"meta_description" db:"meta_description"`                           // meta_description
	MetaKeywords               sql.NullString `json:"meta_keywords" db:"meta_keywords"`                                 // meta_keywords
	Facebook                   sql.NullString `json:"facebook" db:"facebook"`                                           // facebook
	Twitter                    sql.NullString `json:"twitter" db:"twitter"`                                             // twitter
	Instagram                  sql.NullString `json:"instagram" db:"instagram"`                                         // instagram
	Code                       sql.NullString `json:"code" db:"code"`                                                   // code
	DefaultCurrency            string         `json:"default_currency" db:"default_currency"`                           // default_currency
	SupportedCurrencies        sql.NullString `json:"supported_currencies" db:"supported_currencies"`                   // supported_currencies
	DefaultLocale              string         `json:"default_locale" db:"default_locale"`                               // default_locale
	SupportedLocales           sql.NullString `json:"supported_locales" db:"supported_locales"`                         // supported_locales
	DefaultCountryID           int64          `json:"default_country_id" db:"default_country_id"`                       // default_country_id
	ContactPhone               sql.NullString `json:"contact_phone" db:"contact_phone"`                                 // contact_phone
	MailFromAddress            sql.NullString `json:"mail_from_address" db:"mail_from_address"`                         // mail_from_address
	CustomerSupportEmail       sql.NullString `json:"customer_support_email" db:"customer_support_email"`               // customer_support_email
	NewOrderNotificationsEmail sql.NullString `json:"new_order_notifications_email" db:"new_order_notifications_email"` // new_order_notifications_email
	CheckoutZoneID             sql.NullInt64  `json:"checkout_zone_id" db:"checkout_zone_id"`                           // checkout_zone_id
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the StoreSetting exists in the database.
func (ss *StoreSetting) Exists() bool {
	return ss._exists
}

// Deleted returns true when the StoreSetting has been marked for deletion from
// the database.
func (ss *StoreSetting) Deleted() bool {
	return ss._deleted
}

// Insert inserts the StoreSetting to the database.
func (ss *StoreSetting) Insert(ctx context.Context, db DB) error {
	switch {
	case ss._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case ss._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.store_setting (` +
		`store_id, seo_title, seo_robots, meta_description, meta_keywords, facebook, twitter, instagram, code, default_currency, supported_currencies, default_locale, supported_locales, default_country_id, contact_phone, mail_from_address, customer_support_email, new_order_notifications_email, checkout_zone_id` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19` +
		`) RETURNING id`
	// run
	logf(sqlstr, ss.StoreID, ss.SeoTitle, ss.SeoRobots, ss.MetaDescription, ss.MetaKeywords, ss.Facebook, ss.Twitter, ss.Instagram, ss.Code, ss.DefaultCurrency, ss.SupportedCurrencies, ss.DefaultLocale, ss.SupportedLocales, ss.DefaultCountryID, ss.ContactPhone, ss.MailFromAddress, ss.CustomerSupportEmail, ss.NewOrderNotificationsEmail, ss.CheckoutZoneID)
	if err := db.QueryRowContext(ctx, sqlstr, ss.StoreID, ss.SeoTitle, ss.SeoRobots, ss.MetaDescription, ss.MetaKeywords, ss.Facebook, ss.Twitter, ss.Instagram, ss.Code, ss.DefaultCurrency, ss.SupportedCurrencies, ss.DefaultLocale, ss.SupportedLocales, ss.DefaultCountryID, ss.ContactPhone, ss.MailFromAddress, ss.CustomerSupportEmail, ss.NewOrderNotificationsEmail, ss.CheckoutZoneID).Scan(&ss.ID); err != nil {
		return logerror(err)
	}
	// set exists
	ss._exists = true
	return nil
}

// Update updates a StoreSetting in the database.
func (ss *StoreSetting) Update(ctx context.Context, db DB) error {
	switch {
	case !ss._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case ss._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.store_setting SET ` +
		`store_id = $1, seo_title = $2, seo_robots = $3, meta_description = $4, meta_keywords = $5, facebook = $6, twitter = $7, instagram = $8, code = $9, default_currency = $10, supported_currencies = $11, default_locale = $12, supported_locales = $13, default_country_id = $14, contact_phone = $15, mail_from_address = $16, customer_support_email = $17, new_order_notifications_email = $18, checkout_zone_id = $19 ` +
		`WHERE id = $20`
	// run
	logf(sqlstr, ss.StoreID, ss.SeoTitle, ss.SeoRobots, ss.MetaDescription, ss.MetaKeywords, ss.Facebook, ss.Twitter, ss.Instagram, ss.Code, ss.DefaultCurrency, ss.SupportedCurrencies, ss.DefaultLocale, ss.SupportedLocales, ss.DefaultCountryID, ss.ContactPhone, ss.MailFromAddress, ss.CustomerSupportEmail, ss.NewOrderNotificationsEmail, ss.CheckoutZoneID, ss.ID)
	if _, err := db.ExecContext(ctx, sqlstr, ss.StoreID, ss.SeoTitle, ss.SeoRobots, ss.MetaDescription, ss.MetaKeywords, ss.Facebook, ss.Twitter, ss.Instagram, ss.Code, ss.DefaultCurrency, ss.SupportedCurrencies, ss.DefaultLocale, ss.SupportedLocales, ss.DefaultCountryID, ss.ContactPhone, ss.MailFromAddress, ss.CustomerSupportEmail, ss.NewOrderNotificationsEmail, ss.CheckoutZoneID, ss.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the StoreSetting to the database.
func (ss *StoreSetting) Save(ctx context.Context, db DB) error {
	if ss.Exists() {
		return ss.Update(ctx, db)
	}
	return ss.Insert(ctx, db)
}

// Upsert performs an upsert for StoreSetting.
func (ss *StoreSetting) Upsert(ctx context.Context, db DB) error {
	switch {
	case ss._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.store_setting (` +
		`id, store_id, seo_title, seo_robots, meta_description, meta_keywords, facebook, twitter, instagram, code, default_currency, supported_currencies, default_locale, supported_locales, default_country_id, contact_phone, mail_from_address, customer_support_email, new_order_notifications_email, checkout_zone_id` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`store_id = EXCLUDED.store_id, seo_title = EXCLUDED.seo_title, seo_robots = EXCLUDED.seo_robots, meta_description = EXCLUDED.meta_description, meta_keywords = EXCLUDED.meta_keywords, facebook = EXCLUDED.facebook, twitter = EXCLUDED.twitter, instagram = EXCLUDED.instagram, code = EXCLUDED.code, default_currency = EXCLUDED.default_currency, supported_currencies = EXCLUDED.supported_currencies, default_locale = EXCLUDED.default_locale, supported_locales = EXCLUDED.supported_locales, default_country_id = EXCLUDED.default_country_id, contact_phone = EXCLUDED.contact_phone, mail_from_address = EXCLUDED.mail_from_address, customer_support_email = EXCLUDED.customer_support_email, new_order_notifications_email = EXCLUDED.new_order_notifications_email, checkout_zone_id = EXCLUDED.checkout_zone_id `
	// run
	logf(sqlstr, ss.ID, ss.StoreID, ss.SeoTitle, ss.SeoRobots, ss.MetaDescription, ss.MetaKeywords, ss.Facebook, ss.Twitter, ss.Instagram, ss.Code, ss.DefaultCurrency, ss.SupportedCurrencies, ss.DefaultLocale, ss.SupportedLocales, ss.DefaultCountryID, ss.ContactPhone, ss.MailFromAddress, ss.CustomerSupportEmail, ss.NewOrderNotificationsEmail, ss.CheckoutZoneID)
	if _, err := db.ExecContext(ctx, sqlstr, ss.ID, ss.StoreID, ss.SeoTitle, ss.SeoRobots, ss.MetaDescription, ss.MetaKeywords, ss.Facebook, ss.Twitter, ss.Instagram, ss.Code, ss.DefaultCurrency, ss.SupportedCurrencies, ss.DefaultLocale, ss.SupportedLocales, ss.DefaultCountryID, ss.ContactPhone, ss.MailFromAddress, ss.CustomerSupportEmail, ss.NewOrderNotificationsEmail, ss.CheckoutZoneID); err != nil {
		return logerror(err)
	}
	// set exists
	ss._exists = true
	return nil
}

// Delete deletes the StoreSetting from the database.
func (ss *StoreSetting) Delete(ctx context.Context, db DB) error {
	switch {
	case !ss._exists: // doesn't exist
		return nil
	case ss._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.store_setting ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, ss.ID)
	if _, err := db.ExecContext(ctx, sqlstr, ss.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	ss._deleted = true
	return nil
}

// StoreSettingByID retrieves a row from 'public.store_setting' as a StoreSetting.
//
// Generated from index 'store_setting_pkey'.
func StoreSettingByID(ctx context.Context, db DB, id int64) (*StoreSetting, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, store_id, seo_title, seo_robots, meta_description, meta_keywords, facebook, twitter, instagram, code, default_currency, supported_currencies, default_locale, supported_locales, default_country_id, contact_phone, mail_from_address, customer_support_email, new_order_notifications_email, checkout_zone_id ` +
		`FROM public.store_setting ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	ss := StoreSetting{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&ss.ID, &ss.StoreID, &ss.SeoTitle, &ss.SeoRobots, &ss.MetaDescription, &ss.MetaKeywords, &ss.Facebook, &ss.Twitter, &ss.Instagram, &ss.Code, &ss.DefaultCurrency, &ss.SupportedCurrencies, &ss.DefaultLocale, &ss.SupportedLocales, &ss.DefaultCountryID, &ss.ContactPhone, &ss.MailFromAddress, &ss.CustomerSupportEmail, &ss.NewOrderNotificationsEmail, &ss.CheckoutZoneID); err != nil {
		return nil, logerror(err)
	}
	return &ss, nil
}
