// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/k8scommerce/k8scommerce/internal/repos (interfaces: Repo)

// Package mock_repos is a generated GoMock package.
package mock_repos

import (
	repos "github.com/k8scommerce/k8scommerce/internal/repos"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// Cart mocks base method.
func (m *MockRepo) Cart() repos.Cart {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cart")
	ret0, _ := ret[0].(repos.Cart)
	return ret0
}

// Cart indicates an expected call of Cart.
func (mr *MockRepoMockRecorder) Cart() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cart", reflect.TypeOf((*MockRepo)(nil).Cart))
}

// CartItem mocks base method.
func (m *MockRepo) CartItem() repos.CartItem {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CartItem")
	ret0, _ := ret[0].(repos.CartItem)
	return ret0
}

// CartItem indicates an expected call of CartItem.
func (mr *MockRepoMockRecorder) CartItem() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CartItem", reflect.TypeOf((*MockRepo)(nil).CartItem))
}

// Category mocks base method.
func (m *MockRepo) Category() repos.Category {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Category")
	ret0, _ := ret[0].(repos.Category)
	return ret0
}

// Category indicates an expected call of Category.
func (mr *MockRepoMockRecorder) Category() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Category", reflect.TypeOf((*MockRepo)(nil).Category))
}

// Customer mocks base method.
func (m *MockRepo) Customer() repos.Customer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Customer")
	ret0, _ := ret[0].(repos.Customer)
	return ret0
}

// Customer indicates an expected call of Customer.
func (mr *MockRepoMockRecorder) Customer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Customer", reflect.TypeOf((*MockRepo)(nil).Customer))
}

// GetRawDB mocks base method.
func (m *MockRepo) GetRawDB() *sqlx.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRawDB")
	ret0, _ := ret[0].(*sqlx.DB)
	return ret0
}

// GetRawDB indicates an expected call of GetRawDB.
func (mr *MockRepoMockRecorder) GetRawDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRawDB", reflect.TypeOf((*MockRepo)(nil).GetRawDB))
}

// InventoryBrand mocks base method.
func (m *MockRepo) InventoryBrand() repos.InventoryBrand {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InventoryBrand")
	ret0, _ := ret[0].(repos.InventoryBrand)
	return ret0
}

// InventoryBrand indicates an expected call of InventoryBrand.
func (mr *MockRepoMockRecorder) InventoryBrand() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InventoryBrand", reflect.TypeOf((*MockRepo)(nil).InventoryBrand))
}

// InventoryItem mocks base method.
func (m *MockRepo) InventoryItem() repos.InventoryItem {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InventoryItem")
	ret0, _ := ret[0].(repos.InventoryItem)
	return ret0
}

// InventoryItem indicates an expected call of InventoryItem.
func (mr *MockRepoMockRecorder) InventoryItem() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InventoryItem", reflect.TypeOf((*MockRepo)(nil).InventoryItem))
}

// InventoryStock mocks base method.
func (m *MockRepo) InventoryStock() repos.InventoryStock {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InventoryStock")
	ret0, _ := ret[0].(repos.InventoryStock)
	return ret0
}

// InventoryStock indicates an expected call of InventoryStock.
func (mr *MockRepoMockRecorder) InventoryStock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InventoryStock", reflect.TypeOf((*MockRepo)(nil).InventoryStock))
}

// InventorySupplier mocks base method.
func (m *MockRepo) InventorySupplier() repos.InventorySupplier {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InventorySupplier")
	ret0, _ := ret[0].(repos.InventorySupplier)
	return ret0
}

// InventorySupplier indicates an expected call of InventorySupplier.
func (mr *MockRepoMockRecorder) InventorySupplier() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InventorySupplier", reflect.TypeOf((*MockRepo)(nil).InventorySupplier))
}

// OthersBought mocks base method.
func (m *MockRepo) OthersBought() repos.OthersBought {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OthersBought")
	ret0, _ := ret[0].(repos.OthersBought)
	return ret0
}

// OthersBought indicates an expected call of OthersBought.
func (mr *MockRepoMockRecorder) OthersBought() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OthersBought", reflect.TypeOf((*MockRepo)(nil).OthersBought))
}

// Product mocks base method.
func (m *MockRepo) Product() repos.Product {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Product")
	ret0, _ := ret[0].(repos.Product)
	return ret0
}

// Product indicates an expected call of Product.
func (mr *MockRepoMockRecorder) Product() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Product", reflect.TypeOf((*MockRepo)(nil).Product))
}

// SimilarProducts mocks base method.
func (m *MockRepo) SimilarProducts() repos.SimilarProducts {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SimilarProducts")
	ret0, _ := ret[0].(repos.SimilarProducts)
	return ret0
}

// SimilarProducts indicates an expected call of SimilarProducts.
func (mr *MockRepoMockRecorder) SimilarProducts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SimilarProducts", reflect.TypeOf((*MockRepo)(nil).SimilarProducts))
}

// User mocks base method.
func (m *MockRepo) User() repos.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User")
	ret0, _ := ret[0].(repos.User)
	return ret0
}

// User indicates an expected call of User.
func (mr *MockRepoMockRecorder) User() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockRepo)(nil).User))
}
