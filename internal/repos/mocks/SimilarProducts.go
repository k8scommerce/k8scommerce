// Code generated by MockGen. DO NOT EDIT.
// Source: k8scommerce/internal/repos (interfaces: SimilarProducts)

// Package mock_repos is a generated GoMock package.
package mock_repos

import (
	models "k8scommerce/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSimilarProducts is a mock of SimilarProducts interface.
type MockSimilarProducts struct {
	ctrl     *gomock.Controller
	recorder *MockSimilarProductsMockRecorder
}

// MockSimilarProductsMockRecorder is the mock recorder for MockSimilarProducts.
type MockSimilarProductsMockRecorder struct {
	mock *MockSimilarProducts
}

// NewMockSimilarProducts creates a new mock instance.
func NewMockSimilarProducts(ctrl *gomock.Controller) *MockSimilarProducts {
	mock := &MockSimilarProducts{ctrl: ctrl}
	mock.recorder = &MockSimilarProductsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSimilarProducts) EXPECT() *MockSimilarProductsMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSimilarProducts) Create(arg0 *models.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSimilarProductsMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSimilarProducts)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockSimilarProducts) Delete(arg0 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSimilarProductsMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSimilarProducts)(nil).Delete), arg0)
}

// Deleted mocks base method.
func (m *MockSimilarProducts) Deleted() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deleted")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Deleted indicates an expected call of Deleted.
func (mr *MockSimilarProductsMockRecorder) Deleted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deleted", reflect.TypeOf((*MockSimilarProducts)(nil).Deleted))
}

// Exists mocks base method.
func (m *MockSimilarProducts) Exists() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exists indicates an expected call of Exists.
func (mr *MockSimilarProductsMockRecorder) Exists() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockSimilarProducts)(nil).Exists))
}

// Save mocks base method.
func (m *MockSimilarProducts) Save() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save")
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockSimilarProductsMockRecorder) Save() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockSimilarProducts)(nil).Save))
}

// Update mocks base method.
func (m *MockSimilarProducts) Update(arg0 *models.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSimilarProductsMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSimilarProducts)(nil).Update), arg0)
}

// Upsert mocks base method.
func (m *MockSimilarProducts) Upsert() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert")
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockSimilarProductsMockRecorder) Upsert() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockSimilarProducts)(nil).Upsert))
}
