// Code generated by MockGen. DO NOT EDIT.
// Source: k8scommerce/internal/repos (interfaces: Asset)

// Package mock_repos is a generated GoMock package.
package mock_repos

import (
	sql "database/sql"
	models "k8scommerce/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAsset is a mock of Asset interface.
type MockAsset struct {
	ctrl     *gomock.Controller
	recorder *MockAssetMockRecorder
}

// MockAssetMockRecorder is the mock recorder for MockAsset.
type MockAssetMockRecorder struct {
	mock *MockAsset
}

// NewMockAsset creates a new mock instance.
func NewMockAsset(ctrl *gomock.Controller) *MockAsset {
	mock := &MockAsset{ctrl: ctrl}
	mock.recorder = &MockAssetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAsset) EXPECT() *MockAssetMockRecorder {
	return m.recorder
}

// AssetExists mocks base method.
func (m *MockAsset) AssetExists(arg0 int64, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssetExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssetExists indicates an expected call of AssetExists.
func (mr *MockAssetMockRecorder) AssetExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssetExists", reflect.TypeOf((*MockAsset)(nil).AssetExists), arg0, arg1)
}

// Create mocks base method.
func (m *MockAsset) Create(arg0 *models.Asset) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAssetMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAsset)(nil).Create), arg0)
}

// CreateTx mocks base method.
func (m *MockAsset) CreateTx(arg0 *models.Asset, arg1 *sql.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTx indicates an expected call of CreateTx.
func (mr *MockAssetMockRecorder) CreateTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTx", reflect.TypeOf((*MockAsset)(nil).CreateTx), arg0, arg1)
}

// Delete mocks base method.
func (m *MockAsset) Delete(arg0 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAssetMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAsset)(nil).Delete), arg0)
}

// Deleted mocks base method.
func (m *MockAsset) Deleted() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deleted")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Deleted indicates an expected call of Deleted.
func (mr *MockAssetMockRecorder) Deleted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deleted", reflect.TypeOf((*MockAsset)(nil).Deleted))
}

// Exists mocks base method.
func (m *MockAsset) Exists() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exists indicates an expected call of Exists.
func (mr *MockAssetMockRecorder) Exists() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockAsset)(nil).Exists))
}

// GetAssetById mocks base method.
func (m *MockAsset) GetAssetById(arg0 int64) (*models.Asset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssetById", arg0)
	ret0, _ := ret[0].(*models.Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssetById indicates an expected call of GetAssetById.
func (mr *MockAssetMockRecorder) GetAssetById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetById", reflect.TypeOf((*MockAsset)(nil).GetAssetById), arg0)
}

// GetAssetsByVariantId mocks base method.
func (m *MockAsset) GetAssetsByVariantId(arg0 int64, arg1 string) ([]*models.Asset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssetsByVariantId", arg0, arg1)
	ret0, _ := ret[0].([]*models.Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssetsByVariantId indicates an expected call of GetAssetsByVariantId.
func (mr *MockAssetMockRecorder) GetAssetsByVariantId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetsByVariantId", reflect.TypeOf((*MockAsset)(nil).GetAssetsByVariantId), arg0, arg1)
}

// Save mocks base method.
func (m *MockAsset) Save() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save")
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockAssetMockRecorder) Save() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockAsset)(nil).Save))
}

// Update mocks base method.
func (m *MockAsset) Update(arg0 *models.Asset) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockAssetMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAsset)(nil).Update), arg0)
}

// Upsert mocks base method.
func (m *MockAsset) Upsert() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert")
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockAssetMockRecorder) Upsert() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockAsset)(nil).Upsert))
}
