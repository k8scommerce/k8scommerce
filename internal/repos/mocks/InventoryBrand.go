// Code generated by MockGen. DO NOT EDIT.
// Source: k8scommerce/internal/repos (interfaces: InventoryBrand)

// Package mock_repos is a generated GoMock package.
package mock_repos

import (
	models "k8scommerce/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockInventoryBrand is a mock of InventoryBrand interface.
type MockInventoryBrand struct {
	ctrl     *gomock.Controller
	recorder *MockInventoryBrandMockRecorder
}

// MockInventoryBrandMockRecorder is the mock recorder for MockInventoryBrand.
type MockInventoryBrandMockRecorder struct {
	mock *MockInventoryBrand
}

// NewMockInventoryBrand creates a new mock instance.
func NewMockInventoryBrand(ctrl *gomock.Controller) *MockInventoryBrand {
	mock := &MockInventoryBrand{ctrl: ctrl}
	mock.recorder = &MockInventoryBrandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInventoryBrand) EXPECT() *MockInventoryBrandMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockInventoryBrand) Create(arg0 *models.InventoryBrand) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockInventoryBrandMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockInventoryBrand)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockInventoryBrand) Delete(arg0 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockInventoryBrandMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockInventoryBrand)(nil).Delete), arg0)
}

// Deleted mocks base method.
func (m *MockInventoryBrand) Deleted() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deleted")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Deleted indicates an expected call of Deleted.
func (mr *MockInventoryBrandMockRecorder) Deleted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deleted", reflect.TypeOf((*MockInventoryBrand)(nil).Deleted))
}

// Exists mocks base method.
func (m *MockInventoryBrand) Exists() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exists indicates an expected call of Exists.
func (mr *MockInventoryBrandMockRecorder) Exists() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockInventoryBrand)(nil).Exists))
}

// Save mocks base method.
func (m *MockInventoryBrand) Save() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save")
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockInventoryBrandMockRecorder) Save() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockInventoryBrand)(nil).Save))
}

// Update mocks base method.
func (m *MockInventoryBrand) Update(arg0 *models.InventoryBrand) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockInventoryBrandMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockInventoryBrand)(nil).Update), arg0)
}

// Upsert mocks base method.
func (m *MockInventoryBrand) Upsert() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert")
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockInventoryBrandMockRecorder) Upsert() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockInventoryBrand)(nil).Upsert))
}
