// Code generated by MockGen. DO NOT EDIT.
// Source: k8scommerce/internal/repos (interfaces: Cart)

// Package mock_repos is a generated GoMock package.
package mock_repos

import (
	models "k8scommerce/internal/models"
	repos "k8scommerce/internal/repos"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCart is a mock of Cart interface.
type MockCart struct {
	ctrl     *gomock.Controller
	recorder *MockCartMockRecorder
}

// MockCartMockRecorder is the mock recorder for MockCart.
type MockCartMockRecorder struct {
	mock *MockCart
}

// NewMockCart creates a new mock instance.
func NewMockCart(ctrl *gomock.Controller) *MockCart {
	mock := &MockCart{ctrl: ctrl}
	mock.recorder = &MockCartMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCart) EXPECT() *MockCartMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCart) Create(arg0 *models.Cart) (*repos.CartResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*repos.CartResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCartMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCart)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockCart) Delete(arg0 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCartMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCart)(nil).Delete), arg0)
}

// Deleted mocks base method.
func (m *MockCart) Deleted() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deleted")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Deleted indicates an expected call of Deleted.
func (mr *MockCartMockRecorder) Deleted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deleted", reflect.TypeOf((*MockCart)(nil).Deleted))
}

// Exists mocks base method.
func (m *MockCart) Exists() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exists indicates an expected call of Exists.
func (mr *MockCartMockRecorder) Exists() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockCart)(nil).Exists))
}

// GetCartByCustomerId mocks base method.
func (m *MockCart) GetCartByCustomerId(arg0 int64) (*repos.CartResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartByCustomerId", arg0)
	ret0, _ := ret[0].(*repos.CartResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartByCustomerId indicates an expected call of GetCartByCustomerId.
func (mr *MockCartMockRecorder) GetCartByCustomerId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartByCustomerId", reflect.TypeOf((*MockCart)(nil).GetCartByCustomerId), arg0)
}

// SetCart mocks base method.
func (m *MockCart) SetCart(arg0 *models.Cart) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCart", arg0)
}

// SetCart indicates an expected call of SetCart.
func (mr *MockCartMockRecorder) SetCart(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCart", reflect.TypeOf((*MockCart)(nil).SetCart), arg0)
}

// Update mocks base method.
func (m *MockCart) Update(arg0 *models.Cart) (*repos.CartResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(*repos.CartResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockCartMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCart)(nil).Update), arg0)
}

// Upsert mocks base method.
func (m *MockCart) Upsert(arg0 *models.Cart) (*repos.CartResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", arg0)
	ret0, _ := ret[0].(*repos.CartResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upsert indicates an expected call of Upsert.
func (mr *MockCartMockRecorder) Upsert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockCart)(nil).Upsert), arg0)
}
