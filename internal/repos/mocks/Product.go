// Code generated by MockGen. DO NOT EDIT.
// Source: k8scommerce/internal/repos (interfaces: Product)

// Package mock_repos is a generated GoMock package.
package mock_repos

import (
	models "k8scommerce/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProduct is a mock of Product interface.
type MockProduct struct {
	ctrl     *gomock.Controller
	recorder *MockProductMockRecorder
}

// MockProductMockRecorder is the mock recorder for MockProduct.
type MockProductMockRecorder struct {
	mock *MockProduct
}

// NewMockProduct creates a new mock instance.
func NewMockProduct(ctrl *gomock.Controller) *MockProduct {
	mock := &MockProduct{ctrl: ctrl}
	mock.recorder = &MockProductMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProduct) EXPECT() *MockProductMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockProduct) Create(arg0 *models.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockProductMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProduct)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockProduct) Delete(arg0 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockProductMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProduct)(nil).Delete), arg0)
}

// Deleted mocks base method.
func (m *MockProduct) Deleted() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deleted")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Deleted indicates an expected call of Deleted.
func (mr *MockProductMockRecorder) Deleted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deleted", reflect.TypeOf((*MockProduct)(nil).Deleted))
}

// Exists mocks base method.
func (m *MockProduct) Exists() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exists indicates an expected call of Exists.
func (mr *MockProductMockRecorder) Exists() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockProduct)(nil).Exists))
}

// GetAllProducts mocks base method.
func (m *MockProduct) GetAllProducts(arg0, arg1, arg2 int64, arg3 string) (*repos.getAllProductsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProducts", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*repos.getAllProductsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProducts indicates an expected call of GetAllProducts.
func (mr *MockProductMockRecorder) GetAllProducts(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProducts", reflect.TypeOf((*MockProduct)(nil).GetAllProducts), arg0, arg1, arg2, arg3)
}

// GetProductById mocks base method.
func (m *MockProduct) GetProductById(arg0 int64) (*repos.productResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductById", arg0)
	ret0, _ := ret[0].(*repos.productResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductById indicates an expected call of GetProductById.
func (mr *MockProductMockRecorder) GetProductById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductById", reflect.TypeOf((*MockProduct)(nil).GetProductById), arg0)
}

// GetProductBySku mocks base method.
func (m *MockProduct) GetProductBySku(arg0 int64, arg1 string) (*repos.productResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductBySku", arg0, arg1)
	ret0, _ := ret[0].(*repos.productResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductBySku indicates an expected call of GetProductBySku.
func (mr *MockProductMockRecorder) GetProductBySku(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductBySku", reflect.TypeOf((*MockProduct)(nil).GetProductBySku), arg0, arg1)
}

// GetProductBySlug mocks base method.
func (m *MockProduct) GetProductBySlug(arg0 int64, arg1 string) (*repos.productResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductBySlug", arg0, arg1)
	ret0, _ := ret[0].(*repos.productResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductBySlug indicates an expected call of GetProductBySlug.
func (mr *MockProductMockRecorder) GetProductBySlug(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductBySlug", reflect.TypeOf((*MockProduct)(nil).GetProductBySlug), arg0, arg1)
}

// GetProductsByCategoryId mocks base method.
func (m *MockProduct) GetProductsByCategoryId(arg0, arg1, arg2, arg3 int64, arg4 string) (*repos.getProductsByCategoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsByCategoryId", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*repos.getProductsByCategoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsByCategoryId indicates an expected call of GetProductsByCategoryId.
func (mr *MockProductMockRecorder) GetProductsByCategoryId(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsByCategoryId", reflect.TypeOf((*MockProduct)(nil).GetProductsByCategoryId), arg0, arg1, arg2, arg3, arg4)
}

// GetProductsByCategorySlug mocks base method.
func (m *MockProduct) GetProductsByCategorySlug(arg0 int64, arg1 string, arg2, arg3 int64, arg4 string) (*repos.getProductsByCategoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsByCategorySlug", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*repos.getProductsByCategoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsByCategorySlug indicates an expected call of GetProductsByCategorySlug.
func (mr *MockProductMockRecorder) GetProductsByCategorySlug(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsByCategorySlug", reflect.TypeOf((*MockProduct)(nil).GetProductsByCategorySlug), arg0, arg1, arg2, arg3, arg4)
}

// Save mocks base method.
func (m *MockProduct) Save() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save")
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockProductMockRecorder) Save() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockProduct)(nil).Save))
}

// Update mocks base method.
func (m *MockProduct) Update(arg0 *models.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockProductMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProduct)(nil).Update), arg0)
}

// Upsert mocks base method.
func (m *MockProduct) Upsert() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert")
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockProductMockRecorder) Upsert() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockProduct)(nil).Upsert))
}
