// Code generated by MockGen. DO NOT EDIT.
// Source: k8scommerce/internal/events (interfaces: EventManager)

// Package mock_events is a generated GoMock package.
package mock_events

import (
	eventkey "k8scommerce/internal/events/eventkey"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	rabbitmq "github.com/wagslane/go-rabbitmq"
)

// MockEventManager is a mock of EventManager interface.
type MockEventManager struct {
	ctrl     *gomock.Controller
	recorder *MockEventManagerMockRecorder
}

// MockEventManagerMockRecorder is the mock recorder for MockEventManager.
type MockEventManagerMockRecorder struct {
	mock *MockEventManager
}

// NewMockEventManager creates a new mock instance.
func NewMockEventManager(ctrl *gomock.Controller) *MockEventManager {
	mock := &MockEventManager{ctrl: ctrl}
	mock.recorder = &MockEventManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventManager) EXPECT() *MockEventManagerMockRecorder {
	return m.recorder
}

// Consume mocks base method.
func (m *MockEventManager) Consume(arg0 eventkey.EventKey, arg1 string, arg2 rabbitmq.Handler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consume", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Consume indicates an expected call of Consume.
func (mr *MockEventManagerMockRecorder) Consume(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockEventManager)(nil).Consume), arg0, arg1, arg2)
}

// Disconnect mocks base method.
func (m *MockEventManager) Disconnect() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Disconnect")
}

// Disconnect indicates an expected call of Disconnect.
func (mr *MockEventManagerMockRecorder) Disconnect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockEventManager)(nil).Disconnect))
}

// Publish mocks base method.
func (m *MockEventManager) Publish(arg0 eventkey.EventKey, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockEventManagerMockRecorder) Publish(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockEventManager)(nil).Publish), arg0, arg1)
}
