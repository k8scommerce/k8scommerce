// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package warehouse

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WarehouseClientClient is the client API for WarehouseClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WarehouseClientClient interface {
	CreateWarehouse(ctx context.Context, in *CreateWarehouseRequest, opts ...grpc.CallOption) (*CreateWarehouseResponse, error)
	GetAllWarehousesByStoreId(ctx context.Context, in *GetAllWarehousesByStoreIdRequest, opts ...grpc.CallOption) (*GetAllWarehousesByStoreIdResponse, error)
	GetWarehouseById(ctx context.Context, in *GetWarehouseByIdRequest, opts ...grpc.CallOption) (*GetWarehouseByIdResponse, error)
}

type warehouseClientClient struct {
	cc grpc.ClientConnInterface
}

func NewWarehouseClientClient(cc grpc.ClientConnInterface) WarehouseClientClient {
	return &warehouseClientClient{cc}
}

func (c *warehouseClientClient) CreateWarehouse(ctx context.Context, in *CreateWarehouseRequest, opts ...grpc.CallOption) (*CreateWarehouseResponse, error) {
	out := new(CreateWarehouseResponse)
	err := c.cc.Invoke(ctx, "/warehouse.WarehouseClient/CreateWarehouse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClientClient) GetAllWarehousesByStoreId(ctx context.Context, in *GetAllWarehousesByStoreIdRequest, opts ...grpc.CallOption) (*GetAllWarehousesByStoreIdResponse, error) {
	out := new(GetAllWarehousesByStoreIdResponse)
	err := c.cc.Invoke(ctx, "/warehouse.WarehouseClient/GetAllWarehousesByStoreId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClientClient) GetWarehouseById(ctx context.Context, in *GetWarehouseByIdRequest, opts ...grpc.CallOption) (*GetWarehouseByIdResponse, error) {
	out := new(GetWarehouseByIdResponse)
	err := c.cc.Invoke(ctx, "/warehouse.WarehouseClient/GetWarehouseById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WarehouseClientServer is the server API for WarehouseClient service.
// All implementations must embed UnimplementedWarehouseClientServer
// for forward compatibility
type WarehouseClientServer interface {
	CreateWarehouse(context.Context, *CreateWarehouseRequest) (*CreateWarehouseResponse, error)
	GetAllWarehousesByStoreId(context.Context, *GetAllWarehousesByStoreIdRequest) (*GetAllWarehousesByStoreIdResponse, error)
	GetWarehouseById(context.Context, *GetWarehouseByIdRequest) (*GetWarehouseByIdResponse, error)
	mustEmbedUnimplementedWarehouseClientServer()
}

// UnimplementedWarehouseClientServer must be embedded to have forward compatible implementations.
type UnimplementedWarehouseClientServer struct {
}

func (UnimplementedWarehouseClientServer) CreateWarehouse(context.Context, *CreateWarehouseRequest) (*CreateWarehouseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWarehouse not implemented")
}
func (UnimplementedWarehouseClientServer) GetAllWarehousesByStoreId(context.Context, *GetAllWarehousesByStoreIdRequest) (*GetAllWarehousesByStoreIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllWarehousesByStoreId not implemented")
}
func (UnimplementedWarehouseClientServer) GetWarehouseById(context.Context, *GetWarehouseByIdRequest) (*GetWarehouseByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWarehouseById not implemented")
}
func (UnimplementedWarehouseClientServer) mustEmbedUnimplementedWarehouseClientServer() {}

// UnsafeWarehouseClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WarehouseClientServer will
// result in compilation errors.
type UnsafeWarehouseClientServer interface {
	mustEmbedUnimplementedWarehouseClientServer()
}

func RegisterWarehouseClientServer(s grpc.ServiceRegistrar, srv WarehouseClientServer) {
	s.RegisterService(&WarehouseClient_ServiceDesc, srv)
}

func _WarehouseClient_CreateWarehouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWarehouseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseClientServer).CreateWarehouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/warehouse.WarehouseClient/CreateWarehouse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseClientServer).CreateWarehouse(ctx, req.(*CreateWarehouseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarehouseClient_GetAllWarehousesByStoreId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllWarehousesByStoreIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseClientServer).GetAllWarehousesByStoreId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/warehouse.WarehouseClient/GetAllWarehousesByStoreId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseClientServer).GetAllWarehousesByStoreId(ctx, req.(*GetAllWarehousesByStoreIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarehouseClient_GetWarehouseById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWarehouseByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseClientServer).GetWarehouseById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/warehouse.WarehouseClient/GetWarehouseById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseClientServer).GetWarehouseById(ctx, req.(*GetWarehouseByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WarehouseClient_ServiceDesc is the grpc.ServiceDesc for WarehouseClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WarehouseClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "warehouse.WarehouseClient",
	HandlerType: (*WarehouseClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWarehouse",
			Handler:    _WarehouseClient_CreateWarehouse_Handler,
		},
		{
			MethodName: "GetAllWarehousesByStoreId",
			Handler:    _WarehouseClient_GetAllWarehousesByStoreId_Handler,
		},
		{
			MethodName: "GetWarehouseById",
			Handler:    _WarehouseClient_GetWarehouseById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "warehouse.proto",
}
