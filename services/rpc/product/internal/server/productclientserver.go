// Code generated by goctl. DO NOT EDIT!
// Source: product.proto

package server

import (
	"context"

	"k8scommerce/services/rpc/product/internal/logic"
	"k8scommerce/services/rpc/product/internal/svc"
	"k8scommerce/services/rpc/product/pb/product"

	"github.com/localrivet/galaxycache"
)

type ProductClientServer struct {
	svcCtx   *svc.ServiceContext
	universe *galaxycache.Universe
}

func NewProductClientServer(svcCtx *svc.ServiceContext, universe *galaxycache.Universe) *ProductClientServer {
	return &ProductClientServer{
		svcCtx:   svcCtx,
		universe: universe,
	}
}

func (s *ProductClientServer) GetProductBySku(ctx context.Context, in *product.GetProductBySkuRequest) (*product.GetProductBySkuResponse, error) {
	l := logic.NewGetProductBySkuLogic(ctx, s.svcCtx, s.universe)
	return l.GetProductBySku(in)
}

func (s *ProductClientServer) GetProductBySlug(ctx context.Context, in *product.GetProductBySlugRequest) (*product.GetProductBySlugResponse, error) {
	l := logic.NewGetProductBySlugLogic(ctx, s.svcCtx, s.universe)
	return l.GetProductBySlug(in)
}

func (s *ProductClientServer) GetProductById(ctx context.Context, in *product.GetProductByIdRequest) (*product.GetProductByIdResponse, error) {
	l := logic.NewGetProductByIdLogic(ctx, s.svcCtx, s.universe)
	return l.GetProductById(in)
}

func (s *ProductClientServer) GetProductsByCategoryId(ctx context.Context, in *product.GetProductsByCategoryIdRequest) (*product.GetProductsByCategoryIdResponse, error) {
	l := logic.NewGetProductsByCategoryIdLogic(ctx, s.svcCtx, s.universe)
	return l.GetProductsByCategoryId(in)
}

func (s *ProductClientServer) GetAllProducts(ctx context.Context, in *product.GetAllProductsRequest) (*product.GetAllProductsResponse, error) {
	l := logic.NewGetAllProductsLogic(ctx, s.svcCtx, s.universe)
	return l.GetAllProducts(in)
}

func (s *ProductClientServer) CreateProduct(ctx context.Context, in *product.CreateProductRequest) (*product.CreateProductResponse, error) {
	l := logic.NewCreateProductLogic(ctx, s.svcCtx, s.universe)
	return l.CreateProduct(in)
}

func (s *ProductClientServer) UpdateProduct(ctx context.Context, in *product.UpdateProductRequest) (*product.UpdateProductResponse, error) {
	l := logic.NewUpdateProductLogic(ctx, s.svcCtx, s.universe)
	return l.UpdateProduct(in)
}

func (s *ProductClientServer) DeleteProduct(ctx context.Context, in *product.DeleteProductRequest) (*product.DeleteProductResponse, error) {
	l := logic.NewDeleteProductLogic(ctx, s.svcCtx, s.universe)
	return l.DeleteProduct(in)
}
