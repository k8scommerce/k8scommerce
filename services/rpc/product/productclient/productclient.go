// Code generated by goctl. DO NOT EDIT!
// Source: product.proto

package productclient

import (
	"context"

	"github.com/k8scommerce/k8scommerce/services/rpc/product/pb/product"

	"github.com/tal-tech/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateProductRequest            = product.CreateProductRequest
	CreateProductResponse           = product.CreateProductResponse
	DeleteProductRequest            = product.DeleteProductRequest
	DeleteProductResponse           = product.DeleteProductResponse
	GetAllProductsRequest           = product.GetAllProductsRequest
	GetAllProductsResponse          = product.GetAllProductsResponse
	GetProductByIdRequest           = product.GetProductByIdRequest
	GetProductByIdResponse          = product.GetProductByIdResponse
	GetProductBySkuRequest          = product.GetProductBySkuRequest
	GetProductBySkuResponse         = product.GetProductBySkuResponse
	GetProductBySlugRequest         = product.GetProductBySlugRequest
	GetProductBySlugResponse        = product.GetProductBySlugResponse
	GetProductsByCategoryIdRequest  = product.GetProductsByCategoryIdRequest
	GetProductsByCategoryIdResponse = product.GetProductsByCategoryIdResponse
	Price                           = product.Price
	Product                         = product.Product
	UpdateProductRequest            = product.UpdateProductRequest
	UpdateProductResponse           = product.UpdateProductResponse
	Variant                         = product.Variant

	ProductClient interface {
		GetProductBySku(ctx context.Context, in *GetProductBySkuRequest, opts ...grpc.CallOption) (*GetProductBySkuResponse, error)
		GetProductBySlug(ctx context.Context, in *GetProductBySlugRequest, opts ...grpc.CallOption) (*GetProductBySlugResponse, error)
		GetProductById(ctx context.Context, in *GetProductByIdRequest, opts ...grpc.CallOption) (*GetProductByIdResponse, error)
		GetProductsByCategoryId(ctx context.Context, in *GetProductsByCategoryIdRequest, opts ...grpc.CallOption) (*GetProductsByCategoryIdResponse, error)
		GetAllProducts(ctx context.Context, in *GetAllProductsRequest, opts ...grpc.CallOption) (*GetAllProductsResponse, error)
		CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductResponse, error)
		UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*UpdateProductResponse, error)
		DeleteProduct(ctx context.Context, in *DeleteProductRequest, opts ...grpc.CallOption) (*DeleteProductResponse, error)
	}

	defaultProductClient struct {
		cli zrpc.Client
	}
)

func NewProductClient(cli zrpc.Client) ProductClient {
	return &defaultProductClient{
		cli: cli,
	}
}

func (m *defaultProductClient) GetProductBySku(ctx context.Context, in *GetProductBySkuRequest, opts ...grpc.CallOption) (*GetProductBySkuResponse, error) {
	client := product.NewProductClientClient(m.cli.Conn())
	return client.GetProductBySku(ctx, in, opts...)
}

func (m *defaultProductClient) GetProductBySlug(ctx context.Context, in *GetProductBySlugRequest, opts ...grpc.CallOption) (*GetProductBySlugResponse, error) {
	client := product.NewProductClientClient(m.cli.Conn())
	return client.GetProductBySlug(ctx, in, opts...)
}

func (m *defaultProductClient) GetProductById(ctx context.Context, in *GetProductByIdRequest, opts ...grpc.CallOption) (*GetProductByIdResponse, error) {
	client := product.NewProductClientClient(m.cli.Conn())
	return client.GetProductById(ctx, in, opts...)
}

func (m *defaultProductClient) GetProductsByCategoryId(ctx context.Context, in *GetProductsByCategoryIdRequest, opts ...grpc.CallOption) (*GetProductsByCategoryIdResponse, error) {
	client := product.NewProductClientClient(m.cli.Conn())
	return client.GetProductsByCategoryId(ctx, in, opts...)
}

func (m *defaultProductClient) GetAllProducts(ctx context.Context, in *GetAllProductsRequest, opts ...grpc.CallOption) (*GetAllProductsResponse, error) {
	client := product.NewProductClientClient(m.cli.Conn())
	return client.GetAllProducts(ctx, in, opts...)
}

func (m *defaultProductClient) CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductResponse, error) {
	client := product.NewProductClientClient(m.cli.Conn())
	return client.CreateProduct(ctx, in, opts...)
}

func (m *defaultProductClient) UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*UpdateProductResponse, error) {
	client := product.NewProductClientClient(m.cli.Conn())
	return client.UpdateProduct(ctx, in, opts...)
}

func (m *defaultProductClient) DeleteProduct(ctx context.Context, in *DeleteProductRequest, opts ...grpc.CallOption) (*DeleteProductResponse, error) {
	client := product.NewProductClientClient(m.cli.Conn())
	return client.DeleteProduct(ctx, in, opts...)
}
