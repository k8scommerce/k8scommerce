// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package store

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StoreClientClient is the client API for StoreClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StoreClientClient interface {
	CreateStore(ctx context.Context, in *CreateStoreRequest, opts ...grpc.CallOption) (*CreateStoreResponse, error)
	GetStoreById(ctx context.Context, in *GetStoreByIdRequest, opts ...grpc.CallOption) (*GetStoreByIdResponse, error)
	GetAllStores(ctx context.Context, in *GetAllStoresRequest, opts ...grpc.CallOption) (*GetAllStoresResponse, error)
	GetStoreSettings(ctx context.Context, in *GetStoreSettingRequest, opts ...grpc.CallOption) (*GetStoreSettingResponse, error)
}

type storeClientClient struct {
	cc grpc.ClientConnInterface
}

func NewStoreClientClient(cc grpc.ClientConnInterface) StoreClientClient {
	return &storeClientClient{cc}
}

func (c *storeClientClient) CreateStore(ctx context.Context, in *CreateStoreRequest, opts ...grpc.CallOption) (*CreateStoreResponse, error) {
	out := new(CreateStoreResponse)
	err := c.cc.Invoke(ctx, "/store.StoreClient/CreateStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClientClient) GetStoreById(ctx context.Context, in *GetStoreByIdRequest, opts ...grpc.CallOption) (*GetStoreByIdResponse, error) {
	out := new(GetStoreByIdResponse)
	err := c.cc.Invoke(ctx, "/store.StoreClient/GetStoreById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClientClient) GetAllStores(ctx context.Context, in *GetAllStoresRequest, opts ...grpc.CallOption) (*GetAllStoresResponse, error) {
	out := new(GetAllStoresResponse)
	err := c.cc.Invoke(ctx, "/store.StoreClient/GetAllStores", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClientClient) GetStoreSettings(ctx context.Context, in *GetStoreSettingRequest, opts ...grpc.CallOption) (*GetStoreSettingResponse, error) {
	out := new(GetStoreSettingResponse)
	err := c.cc.Invoke(ctx, "/store.StoreClient/GetStoreSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StoreClientServer is the server API for StoreClient service.
// All implementations must embed UnimplementedStoreClientServer
// for forward compatibility
type StoreClientServer interface {
	CreateStore(context.Context, *CreateStoreRequest) (*CreateStoreResponse, error)
	GetStoreById(context.Context, *GetStoreByIdRequest) (*GetStoreByIdResponse, error)
	GetAllStores(context.Context, *GetAllStoresRequest) (*GetAllStoresResponse, error)
	GetStoreSettings(context.Context, *GetStoreSettingRequest) (*GetStoreSettingResponse, error)
	mustEmbedUnimplementedStoreClientServer()
}

// UnimplementedStoreClientServer must be embedded to have forward compatible implementations.
type UnimplementedStoreClientServer struct {
}

func (UnimplementedStoreClientServer) CreateStore(context.Context, *CreateStoreRequest) (*CreateStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStore not implemented")
}
func (UnimplementedStoreClientServer) GetStoreById(context.Context, *GetStoreByIdRequest) (*GetStoreByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoreById not implemented")
}
func (UnimplementedStoreClientServer) GetAllStores(context.Context, *GetAllStoresRequest) (*GetAllStoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllStores not implemented")
}
func (UnimplementedStoreClientServer) GetStoreSettings(context.Context, *GetStoreSettingRequest) (*GetStoreSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoreSettings not implemented")
}
func (UnimplementedStoreClientServer) mustEmbedUnimplementedStoreClientServer() {}

// UnsafeStoreClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StoreClientServer will
// result in compilation errors.
type UnsafeStoreClientServer interface {
	mustEmbedUnimplementedStoreClientServer()
}

func RegisterStoreClientServer(s grpc.ServiceRegistrar, srv StoreClientServer) {
	s.RegisterService(&StoreClient_ServiceDesc, srv)
}

func _StoreClient_CreateStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreClientServer).CreateStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/store.StoreClient/CreateStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreClientServer).CreateStore(ctx, req.(*CreateStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreClient_GetStoreById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoreByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreClientServer).GetStoreById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/store.StoreClient/GetStoreById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreClientServer).GetStoreById(ctx, req.(*GetStoreByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreClient_GetAllStores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllStoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreClientServer).GetAllStores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/store.StoreClient/GetAllStores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreClientServer).GetAllStores(ctx, req.(*GetAllStoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreClient_GetStoreSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoreSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreClientServer).GetStoreSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/store.StoreClient/GetStoreSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreClientServer).GetStoreSettings(ctx, req.(*GetStoreSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StoreClient_ServiceDesc is the grpc.ServiceDesc for StoreClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StoreClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "store.StoreClient",
	HandlerType: (*StoreClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStore",
			Handler:    _StoreClient_CreateStore_Handler,
		},
		{
			MethodName: "GetStoreById",
			Handler:    _StoreClient_GetStoreById_Handler,
		},
		{
			MethodName: "GetAllStores",
			Handler:    _StoreClient_GetAllStores_Handler,
		},
		{
			MethodName: "GetStoreSettings",
			Handler:    _StoreClient_GetStoreSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "store.proto",
}
