// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package payment

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PaymentClientClient is the client API for PaymentClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentClientClient interface {
	ProcessPayment(ctx context.Context, in *ProcessPaymentRequest, opts ...grpc.CallOption) (*ProcessPaymentResponse, error)
	GetTransactions(ctx context.Context, in *ProcessPaymentRequest, opts ...grpc.CallOption) (*ProcessPaymentResponse, error)
	GetTranscationById(ctx context.Context, in *GetTranscationByIdRequest, opts ...grpc.CallOption) (*GetTranscationByIdResponse, error)
	SearchTranscations(ctx context.Context, in *SearchTransactionsRequest, opts ...grpc.CallOption) (*SearchTransactionsResponse, error)
}

type paymentClientClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentClientClient(cc grpc.ClientConnInterface) PaymentClientClient {
	return &paymentClientClient{cc}
}

func (c *paymentClientClient) ProcessPayment(ctx context.Context, in *ProcessPaymentRequest, opts ...grpc.CallOption) (*ProcessPaymentResponse, error) {
	out := new(ProcessPaymentResponse)
	err := c.cc.Invoke(ctx, "/payment.PaymentClient/ProcessPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentClientClient) GetTransactions(ctx context.Context, in *ProcessPaymentRequest, opts ...grpc.CallOption) (*ProcessPaymentResponse, error) {
	out := new(ProcessPaymentResponse)
	err := c.cc.Invoke(ctx, "/payment.PaymentClient/GetTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentClientClient) GetTranscationById(ctx context.Context, in *GetTranscationByIdRequest, opts ...grpc.CallOption) (*GetTranscationByIdResponse, error) {
	out := new(GetTranscationByIdResponse)
	err := c.cc.Invoke(ctx, "/payment.PaymentClient/GetTranscationById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentClientClient) SearchTranscations(ctx context.Context, in *SearchTransactionsRequest, opts ...grpc.CallOption) (*SearchTransactionsResponse, error) {
	out := new(SearchTransactionsResponse)
	err := c.cc.Invoke(ctx, "/payment.PaymentClient/SearchTranscations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentClientServer is the server API for PaymentClient service.
// All implementations must embed UnimplementedPaymentClientServer
// for forward compatibility
type PaymentClientServer interface {
	ProcessPayment(context.Context, *ProcessPaymentRequest) (*ProcessPaymentResponse, error)
	GetTransactions(context.Context, *ProcessPaymentRequest) (*ProcessPaymentResponse, error)
	GetTranscationById(context.Context, *GetTranscationByIdRequest) (*GetTranscationByIdResponse, error)
	SearchTranscations(context.Context, *SearchTransactionsRequest) (*SearchTransactionsResponse, error)
	mustEmbedUnimplementedPaymentClientServer()
}

// UnimplementedPaymentClientServer must be embedded to have forward compatible implementations.
type UnimplementedPaymentClientServer struct {
}

func (UnimplementedPaymentClientServer) ProcessPayment(context.Context, *ProcessPaymentRequest) (*ProcessPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessPayment not implemented")
}
func (UnimplementedPaymentClientServer) GetTransactions(context.Context, *ProcessPaymentRequest) (*ProcessPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactions not implemented")
}
func (UnimplementedPaymentClientServer) GetTranscationById(context.Context, *GetTranscationByIdRequest) (*GetTranscationByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTranscationById not implemented")
}
func (UnimplementedPaymentClientServer) SearchTranscations(context.Context, *SearchTransactionsRequest) (*SearchTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchTranscations not implemented")
}
func (UnimplementedPaymentClientServer) mustEmbedUnimplementedPaymentClientServer() {}

// UnsafePaymentClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentClientServer will
// result in compilation errors.
type UnsafePaymentClientServer interface {
	mustEmbedUnimplementedPaymentClientServer()
}

func RegisterPaymentClientServer(s grpc.ServiceRegistrar, srv PaymentClientServer) {
	s.RegisterService(&PaymentClient_ServiceDesc, srv)
}

func _PaymentClient_ProcessPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentClientServer).ProcessPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentClient/ProcessPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentClientServer).ProcessPayment(ctx, req.(*ProcessPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentClient_GetTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentClientServer).GetTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentClient/GetTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentClientServer).GetTransactions(ctx, req.(*ProcessPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentClient_GetTranscationById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTranscationByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentClientServer).GetTranscationById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentClient/GetTranscationById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentClientServer).GetTranscationById(ctx, req.(*GetTranscationByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentClient_SearchTranscations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentClientServer).SearchTranscations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentClient/SearchTranscations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentClientServer).SearchTranscations(ctx, req.(*SearchTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentClient_ServiceDesc is the grpc.ServiceDesc for PaymentClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payment.PaymentClient",
	HandlerType: (*PaymentClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessPayment",
			Handler:    _PaymentClient_ProcessPayment_Handler,
		},
		{
			MethodName: "GetTransactions",
			Handler:    _PaymentClient_GetTransactions_Handler,
		},
		{
			MethodName: "GetTranscationById",
			Handler:    _PaymentClient_GetTranscationById_Handler,
		},
		{
			MethodName: "SearchTranscations",
			Handler:    _PaymentClient_SearchTranscations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payment.proto",
}
