// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package customer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CustomerClientClient is the client API for CustomerClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomerClientClient interface {
	CreateCustomer(ctx context.Context, in *CreateCustomerRequest, opts ...grpc.CallOption) (*CreateCustomerResponse, error)
	UpdateCustomer(ctx context.Context, in *UpdateCustomerRequest, opts ...grpc.CallOption) (*UpdateCustomerResponse, error)
	GetCustomerByEmail(ctx context.Context, in *GetCustomerByEmailRequest, opts ...grpc.CallOption) (*GetCustomerByEmailResponse, error)
	SetPassword(ctx context.Context, in *SetPasswordRequest, opts ...grpc.CallOption) (*SetPasswordResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	SendForgotPasswordEmail(ctx context.Context, in *SendForgotPasswordEmailRequest, opts ...grpc.CallOption) (*SendForgotPasswordEmailResponse, error)
	SendConfirmEmailAddressEmail(ctx context.Context, in *SendConfirmEmailAddressEmailRequest, opts ...grpc.CallOption) (*SendConfirmEmailAddressEmailResponse, error)
	VerifyEmailAddress(ctx context.Context, in *VerifyEmailAddressRequest, opts ...grpc.CallOption) (*VerifyEmailAddressResponse, error)
}

type customerClientClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomerClientClient(cc grpc.ClientConnInterface) CustomerClientClient {
	return &customerClientClient{cc}
}

func (c *customerClientClient) CreateCustomer(ctx context.Context, in *CreateCustomerRequest, opts ...grpc.CallOption) (*CreateCustomerResponse, error) {
	out := new(CreateCustomerResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerClient/CreateCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerClientClient) UpdateCustomer(ctx context.Context, in *UpdateCustomerRequest, opts ...grpc.CallOption) (*UpdateCustomerResponse, error) {
	out := new(UpdateCustomerResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerClient/UpdateCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerClientClient) GetCustomerByEmail(ctx context.Context, in *GetCustomerByEmailRequest, opts ...grpc.CallOption) (*GetCustomerByEmailResponse, error) {
	out := new(GetCustomerByEmailResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerClient/GetCustomerByEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerClientClient) SetPassword(ctx context.Context, in *SetPasswordRequest, opts ...grpc.CallOption) (*SetPasswordResponse, error) {
	out := new(SetPasswordResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerClient/SetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerClientClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerClient/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerClientClient) SendForgotPasswordEmail(ctx context.Context, in *SendForgotPasswordEmailRequest, opts ...grpc.CallOption) (*SendForgotPasswordEmailResponse, error) {
	out := new(SendForgotPasswordEmailResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerClient/SendForgotPasswordEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerClientClient) SendConfirmEmailAddressEmail(ctx context.Context, in *SendConfirmEmailAddressEmailRequest, opts ...grpc.CallOption) (*SendConfirmEmailAddressEmailResponse, error) {
	out := new(SendConfirmEmailAddressEmailResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerClient/SendConfirmEmailAddressEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerClientClient) VerifyEmailAddress(ctx context.Context, in *VerifyEmailAddressRequest, opts ...grpc.CallOption) (*VerifyEmailAddressResponse, error) {
	out := new(VerifyEmailAddressResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerClient/VerifyEmailAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerClientServer is the server API for CustomerClient service.
// All implementations must embed UnimplementedCustomerClientServer
// for forward compatibility
type CustomerClientServer interface {
	CreateCustomer(context.Context, *CreateCustomerRequest) (*CreateCustomerResponse, error)
	UpdateCustomer(context.Context, *UpdateCustomerRequest) (*UpdateCustomerResponse, error)
	GetCustomerByEmail(context.Context, *GetCustomerByEmailRequest) (*GetCustomerByEmailResponse, error)
	SetPassword(context.Context, *SetPasswordRequest) (*SetPasswordResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	SendForgotPasswordEmail(context.Context, *SendForgotPasswordEmailRequest) (*SendForgotPasswordEmailResponse, error)
	SendConfirmEmailAddressEmail(context.Context, *SendConfirmEmailAddressEmailRequest) (*SendConfirmEmailAddressEmailResponse, error)
	VerifyEmailAddress(context.Context, *VerifyEmailAddressRequest) (*VerifyEmailAddressResponse, error)
	mustEmbedUnimplementedCustomerClientServer()
}

// UnimplementedCustomerClientServer must be embedded to have forward compatible implementations.
type UnimplementedCustomerClientServer struct {
}

func (UnimplementedCustomerClientServer) CreateCustomer(context.Context, *CreateCustomerRequest) (*CreateCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomer not implemented")
}
func (UnimplementedCustomerClientServer) UpdateCustomer(context.Context, *UpdateCustomerRequest) (*UpdateCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomer not implemented")
}
func (UnimplementedCustomerClientServer) GetCustomerByEmail(context.Context, *GetCustomerByEmailRequest) (*GetCustomerByEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerByEmail not implemented")
}
func (UnimplementedCustomerClientServer) SetPassword(context.Context, *SetPasswordRequest) (*SetPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPassword not implemented")
}
func (UnimplementedCustomerClientServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedCustomerClientServer) SendForgotPasswordEmail(context.Context, *SendForgotPasswordEmailRequest) (*SendForgotPasswordEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendForgotPasswordEmail not implemented")
}
func (UnimplementedCustomerClientServer) SendConfirmEmailAddressEmail(context.Context, *SendConfirmEmailAddressEmailRequest) (*SendConfirmEmailAddressEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendConfirmEmailAddressEmail not implemented")
}
func (UnimplementedCustomerClientServer) VerifyEmailAddress(context.Context, *VerifyEmailAddressRequest) (*VerifyEmailAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyEmailAddress not implemented")
}
func (UnimplementedCustomerClientServer) mustEmbedUnimplementedCustomerClientServer() {}

// UnsafeCustomerClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomerClientServer will
// result in compilation errors.
type UnsafeCustomerClientServer interface {
	mustEmbedUnimplementedCustomerClientServer()
}

func RegisterCustomerClientServer(s grpc.ServiceRegistrar, srv CustomerClientServer) {
	s.RegisterService(&CustomerClient_ServiceDesc, srv)
}

func _CustomerClient_CreateCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerClientServer).CreateCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerClient/CreateCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerClientServer).CreateCustomer(ctx, req.(*CreateCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerClient_UpdateCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerClientServer).UpdateCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerClient/UpdateCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerClientServer).UpdateCustomer(ctx, req.(*UpdateCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerClient_GetCustomerByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerByEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerClientServer).GetCustomerByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerClient/GetCustomerByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerClientServer).GetCustomerByEmail(ctx, req.(*GetCustomerByEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerClient_SetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerClientServer).SetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerClient/SetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerClientServer).SetPassword(ctx, req.(*SetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerClient_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerClientServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerClient/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerClientServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerClient_SendForgotPasswordEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendForgotPasswordEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerClientServer).SendForgotPasswordEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerClient/SendForgotPasswordEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerClientServer).SendForgotPasswordEmail(ctx, req.(*SendForgotPasswordEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerClient_SendConfirmEmailAddressEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendConfirmEmailAddressEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerClientServer).SendConfirmEmailAddressEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerClient/SendConfirmEmailAddressEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerClientServer).SendConfirmEmailAddressEmail(ctx, req.(*SendConfirmEmailAddressEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerClient_VerifyEmailAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyEmailAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerClientServer).VerifyEmailAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerClient/VerifyEmailAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerClientServer).VerifyEmailAddress(ctx, req.(*VerifyEmailAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CustomerClient_ServiceDesc is the grpc.ServiceDesc for CustomerClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomerClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "customer.CustomerClient",
	HandlerType: (*CustomerClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCustomer",
			Handler:    _CustomerClient_CreateCustomer_Handler,
		},
		{
			MethodName: "UpdateCustomer",
			Handler:    _CustomerClient_UpdateCustomer_Handler,
		},
		{
			MethodName: "GetCustomerByEmail",
			Handler:    _CustomerClient_GetCustomerByEmail_Handler,
		},
		{
			MethodName: "SetPassword",
			Handler:    _CustomerClient_SetPassword_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _CustomerClient_Login_Handler,
		},
		{
			MethodName: "SendForgotPasswordEmail",
			Handler:    _CustomerClient_SendForgotPasswordEmail_Handler,
		},
		{
			MethodName: "SendConfirmEmailAddressEmail",
			Handler:    _CustomerClient_SendConfirmEmailAddressEmail_Handler,
		},
		{
			MethodName: "VerifyEmailAddress",
			Handler:    _CustomerClient_VerifyEmailAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "customer.proto",
}
