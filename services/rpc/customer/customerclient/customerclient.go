// Code generated by goctl. DO NOT EDIT!
// Source: customer.proto

package customerclient

import (
	"context"

	"github.com/k8scommerce/k8scommerce/services/rpc/customer/pb/customer"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Address                              = customer.Address
	CreateCustomerRequest                = customer.CreateCustomerRequest
	CreateCustomerResponse               = customer.CreateCustomerResponse
	Customer                             = customer.Customer
	GetCustomerByEmailRequest            = customer.GetCustomerByEmailRequest
	GetCustomerByEmailResponse           = customer.GetCustomerByEmailResponse
	LoginRequest                         = customer.LoginRequest
	LoginResponse                        = customer.LoginResponse
	SendConfirmEmailAddressEmailRequest  = customer.SendConfirmEmailAddressEmailRequest
	SendConfirmEmailAddressEmailResponse = customer.SendConfirmEmailAddressEmailResponse
	SendForgotPasswordEmailRequest       = customer.SendForgotPasswordEmailRequest
	SendForgotPasswordEmailResponse      = customer.SendForgotPasswordEmailResponse
	SetPasswordRequest                   = customer.SetPasswordRequest
	SetPasswordResponse                  = customer.SetPasswordResponse
	UpdateCustomerRequest                = customer.UpdateCustomerRequest
	UpdateCustomerResponse               = customer.UpdateCustomerResponse
	VerifyEmailAddressRequest            = customer.VerifyEmailAddressRequest
	VerifyEmailAddressResponse           = customer.VerifyEmailAddressResponse

	CustomerClient interface {
		CreateCustomer(ctx context.Context, in *CreateCustomerRequest, opts ...grpc.CallOption) (*CreateCustomerResponse, error)
		UpdateCustomer(ctx context.Context, in *UpdateCustomerRequest, opts ...grpc.CallOption) (*UpdateCustomerResponse, error)
		GetCustomerByEmail(ctx context.Context, in *GetCustomerByEmailRequest, opts ...grpc.CallOption) (*GetCustomerByEmailResponse, error)
		SetPassword(ctx context.Context, in *SetPasswordRequest, opts ...grpc.CallOption) (*SetPasswordResponse, error)
		Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
		SendForgotPasswordEmail(ctx context.Context, in *SendForgotPasswordEmailRequest, opts ...grpc.CallOption) (*SendForgotPasswordEmailResponse, error)
		SendConfirmEmailAddressEmail(ctx context.Context, in *SendConfirmEmailAddressEmailRequest, opts ...grpc.CallOption) (*SendConfirmEmailAddressEmailResponse, error)
		VerifyEmailAddress(ctx context.Context, in *VerifyEmailAddressRequest, opts ...grpc.CallOption) (*VerifyEmailAddressResponse, error)
	}

	defaultCustomerClient struct {
		cli zrpc.Client
	}
)

func NewCustomerClient(cli zrpc.Client) CustomerClient {
	return &defaultCustomerClient{
		cli: cli,
	}
}

func (m *defaultCustomerClient) CreateCustomer(ctx context.Context, in *CreateCustomerRequest, opts ...grpc.CallOption) (*CreateCustomerResponse, error) {
	client := customer.NewCustomerClientClient(m.cli.Conn())
	return client.CreateCustomer(ctx, in, opts...)
}

func (m *defaultCustomerClient) UpdateCustomer(ctx context.Context, in *UpdateCustomerRequest, opts ...grpc.CallOption) (*UpdateCustomerResponse, error) {
	client := customer.NewCustomerClientClient(m.cli.Conn())
	return client.UpdateCustomer(ctx, in, opts...)
}

func (m *defaultCustomerClient) GetCustomerByEmail(ctx context.Context, in *GetCustomerByEmailRequest, opts ...grpc.CallOption) (*GetCustomerByEmailResponse, error) {
	client := customer.NewCustomerClientClient(m.cli.Conn())
	return client.GetCustomerByEmail(ctx, in, opts...)
}

func (m *defaultCustomerClient) SetPassword(ctx context.Context, in *SetPasswordRequest, opts ...grpc.CallOption) (*SetPasswordResponse, error) {
	client := customer.NewCustomerClientClient(m.cli.Conn())
	return client.SetPassword(ctx, in, opts...)
}

func (m *defaultCustomerClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	client := customer.NewCustomerClientClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultCustomerClient) SendForgotPasswordEmail(ctx context.Context, in *SendForgotPasswordEmailRequest, opts ...grpc.CallOption) (*SendForgotPasswordEmailResponse, error) {
	client := customer.NewCustomerClientClient(m.cli.Conn())
	return client.SendForgotPasswordEmail(ctx, in, opts...)
}

func (m *defaultCustomerClient) SendConfirmEmailAddressEmail(ctx context.Context, in *SendConfirmEmailAddressEmailRequest, opts ...grpc.CallOption) (*SendConfirmEmailAddressEmailResponse, error) {
	client := customer.NewCustomerClientClient(m.cli.Conn())
	return client.SendConfirmEmailAddressEmail(ctx, in, opts...)
}

func (m *defaultCustomerClient) VerifyEmailAddress(ctx context.Context, in *VerifyEmailAddressRequest, opts ...grpc.CallOption) (*VerifyEmailAddressResponse, error) {
	client := customer.NewCustomerClientClient(m.cli.Conn())
	return client.VerifyEmailAddress(ctx, in, opts...)
}
