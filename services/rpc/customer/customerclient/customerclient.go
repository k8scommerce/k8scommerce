// Code generated by goctl. DO NOT EDIT!
// Source: customer.proto

package customerclient

import (
	"context"

	"github.com/k8scommerce/k8scommerce/services/rpc/customer/pb/customer"

	"github.com/tal-tech/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Address                = customer.Address
	CreateCustomerRequest  = customer.CreateCustomerRequest
	CreateCustomerResponse = customer.CreateCustomerResponse
	Customer               = customer.Customer
	CustomerAccount        = customer.CustomerAccount
	LoginRequest           = customer.LoginRequest
	LoginResponse          = customer.LoginResponse

	CustomerClient interface {
		CreateCustomer(ctx context.Context, in *CreateCustomerRequest, opts ...grpc.CallOption) (*CreateCustomerResponse, error)
		Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	}

	defaultCustomerClient struct {
		cli zrpc.Client
	}
)

func NewCustomerClient(cli zrpc.Client) CustomerClient {
	return &defaultCustomerClient{
		cli: cli,
	}
}

func (m *defaultCustomerClient) CreateCustomer(ctx context.Context, in *CreateCustomerRequest, opts ...grpc.CallOption) (*CreateCustomerResponse, error) {
	client := customer.NewCustomerClientClient(m.cli.Conn())
	return client.CreateCustomer(ctx, in, opts...)
}

func (m *defaultCustomerClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	client := customer.NewCustomerClientClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}
