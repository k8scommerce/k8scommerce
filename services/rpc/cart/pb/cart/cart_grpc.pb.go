// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package cart

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CartClientClient is the client API for CartClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CartClientClient interface {
	CreateCart(ctx context.Context, in *CreateCartRequest, opts ...grpc.CallOption) (*CartResponse, error)
	AttachCustomer(ctx context.Context, in *AttachCustomerRequest, opts ...grpc.CallOption) (*CartResponse, error)
	UpdateCustomerDetail(ctx context.Context, in *UpdateCustomerDetailRequest, opts ...grpc.CallOption) (*CartResponse, error)
	UpdateStatus(ctx context.Context, in *UpdateStatusRequest, opts ...grpc.CallOption) (*CartResponse, error)
	GetByCartId(ctx context.Context, in *GetByCartIdRequest, opts ...grpc.CallOption) (*CartResponse, error)
	GetBySessionId(ctx context.Context, in *GetBySessionIdRequest, opts ...grpc.CallOption) (*CartResponse, error)
	AddItem(ctx context.Context, in *AddItemRequest, opts ...grpc.CallOption) (*CartResponse, error)
	BulkAddItems(ctx context.Context, in *BulkAddItemsRequest, opts ...grpc.CallOption) (*CartResponse, error)
	UpdateItemQuantity(ctx context.Context, in *UpdateItemQuantityRequest, opts ...grpc.CallOption) (*CartResponse, error)
	RemoveItem(ctx context.Context, in *RemoveItemRequest, opts ...grpc.CallOption) (*CartResponse, error)
	ClearCart(ctx context.Context, in *ClearCartRequest, opts ...grpc.CallOption) (*CartResponse, error)
}

type cartClientClient struct {
	cc grpc.ClientConnInterface
}

func NewCartClientClient(cc grpc.ClientConnInterface) CartClientClient {
	return &cartClientClient{cc}
}

func (c *cartClientClient) CreateCart(ctx context.Context, in *CreateCartRequest, opts ...grpc.CallOption) (*CartResponse, error) {
	out := new(CartResponse)
	err := c.cc.Invoke(ctx, "/cart.CartClient/CreateCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartClientClient) AttachCustomer(ctx context.Context, in *AttachCustomerRequest, opts ...grpc.CallOption) (*CartResponse, error) {
	out := new(CartResponse)
	err := c.cc.Invoke(ctx, "/cart.CartClient/AttachCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartClientClient) UpdateCustomerDetail(ctx context.Context, in *UpdateCustomerDetailRequest, opts ...grpc.CallOption) (*CartResponse, error) {
	out := new(CartResponse)
	err := c.cc.Invoke(ctx, "/cart.CartClient/UpdateCustomerDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartClientClient) UpdateStatus(ctx context.Context, in *UpdateStatusRequest, opts ...grpc.CallOption) (*CartResponse, error) {
	out := new(CartResponse)
	err := c.cc.Invoke(ctx, "/cart.CartClient/UpdateStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartClientClient) GetByCartId(ctx context.Context, in *GetByCartIdRequest, opts ...grpc.CallOption) (*CartResponse, error) {
	out := new(CartResponse)
	err := c.cc.Invoke(ctx, "/cart.CartClient/GetByCartId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartClientClient) GetBySessionId(ctx context.Context, in *GetBySessionIdRequest, opts ...grpc.CallOption) (*CartResponse, error) {
	out := new(CartResponse)
	err := c.cc.Invoke(ctx, "/cart.CartClient/GetBySessionId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartClientClient) AddItem(ctx context.Context, in *AddItemRequest, opts ...grpc.CallOption) (*CartResponse, error) {
	out := new(CartResponse)
	err := c.cc.Invoke(ctx, "/cart.CartClient/AddItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartClientClient) BulkAddItems(ctx context.Context, in *BulkAddItemsRequest, opts ...grpc.CallOption) (*CartResponse, error) {
	out := new(CartResponse)
	err := c.cc.Invoke(ctx, "/cart.CartClient/BulkAddItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartClientClient) UpdateItemQuantity(ctx context.Context, in *UpdateItemQuantityRequest, opts ...grpc.CallOption) (*CartResponse, error) {
	out := new(CartResponse)
	err := c.cc.Invoke(ctx, "/cart.CartClient/UpdateItemQuantity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartClientClient) RemoveItem(ctx context.Context, in *RemoveItemRequest, opts ...grpc.CallOption) (*CartResponse, error) {
	out := new(CartResponse)
	err := c.cc.Invoke(ctx, "/cart.CartClient/RemoveItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartClientClient) ClearCart(ctx context.Context, in *ClearCartRequest, opts ...grpc.CallOption) (*CartResponse, error) {
	out := new(CartResponse)
	err := c.cc.Invoke(ctx, "/cart.CartClient/ClearCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CartClientServer is the server API for CartClient service.
// All implementations must embed UnimplementedCartClientServer
// for forward compatibility
type CartClientServer interface {
	CreateCart(context.Context, *CreateCartRequest) (*CartResponse, error)
	AttachCustomer(context.Context, *AttachCustomerRequest) (*CartResponse, error)
	UpdateCustomerDetail(context.Context, *UpdateCustomerDetailRequest) (*CartResponse, error)
	UpdateStatus(context.Context, *UpdateStatusRequest) (*CartResponse, error)
	GetByCartId(context.Context, *GetByCartIdRequest) (*CartResponse, error)
	GetBySessionId(context.Context, *GetBySessionIdRequest) (*CartResponse, error)
	AddItem(context.Context, *AddItemRequest) (*CartResponse, error)
	BulkAddItems(context.Context, *BulkAddItemsRequest) (*CartResponse, error)
	UpdateItemQuantity(context.Context, *UpdateItemQuantityRequest) (*CartResponse, error)
	RemoveItem(context.Context, *RemoveItemRequest) (*CartResponse, error)
	ClearCart(context.Context, *ClearCartRequest) (*CartResponse, error)
	mustEmbedUnimplementedCartClientServer()
}

// UnimplementedCartClientServer must be embedded to have forward compatible implementations.
type UnimplementedCartClientServer struct {
}

func (UnimplementedCartClientServer) CreateCart(context.Context, *CreateCartRequest) (*CartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCart not implemented")
}
func (UnimplementedCartClientServer) AttachCustomer(context.Context, *AttachCustomerRequest) (*CartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachCustomer not implemented")
}
func (UnimplementedCartClientServer) UpdateCustomerDetail(context.Context, *UpdateCustomerDetailRequest) (*CartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomerDetail not implemented")
}
func (UnimplementedCartClientServer) UpdateStatus(context.Context, *UpdateStatusRequest) (*CartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatus not implemented")
}
func (UnimplementedCartClientServer) GetByCartId(context.Context, *GetByCartIdRequest) (*CartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByCartId not implemented")
}
func (UnimplementedCartClientServer) GetBySessionId(context.Context, *GetBySessionIdRequest) (*CartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBySessionId not implemented")
}
func (UnimplementedCartClientServer) AddItem(context.Context, *AddItemRequest) (*CartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddItem not implemented")
}
func (UnimplementedCartClientServer) BulkAddItems(context.Context, *BulkAddItemsRequest) (*CartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkAddItems not implemented")
}
func (UnimplementedCartClientServer) UpdateItemQuantity(context.Context, *UpdateItemQuantityRequest) (*CartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateItemQuantity not implemented")
}
func (UnimplementedCartClientServer) RemoveItem(context.Context, *RemoveItemRequest) (*CartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveItem not implemented")
}
func (UnimplementedCartClientServer) ClearCart(context.Context, *ClearCartRequest) (*CartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearCart not implemented")
}
func (UnimplementedCartClientServer) mustEmbedUnimplementedCartClientServer() {}

// UnsafeCartClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CartClientServer will
// result in compilation errors.
type UnsafeCartClientServer interface {
	mustEmbedUnimplementedCartClientServer()
}

func RegisterCartClientServer(s grpc.ServiceRegistrar, srv CartClientServer) {
	s.RegisterService(&CartClient_ServiceDesc, srv)
}

func _CartClient_CreateCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartClientServer).CreateCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cart.CartClient/CreateCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartClientServer).CreateCart(ctx, req.(*CreateCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartClient_AttachCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartClientServer).AttachCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cart.CartClient/AttachCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartClientServer).AttachCustomer(ctx, req.(*AttachCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartClient_UpdateCustomerDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomerDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartClientServer).UpdateCustomerDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cart.CartClient/UpdateCustomerDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartClientServer).UpdateCustomerDetail(ctx, req.(*UpdateCustomerDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartClient_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartClientServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cart.CartClient/UpdateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartClientServer).UpdateStatus(ctx, req.(*UpdateStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartClient_GetByCartId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByCartIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartClientServer).GetByCartId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cart.CartClient/GetByCartId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartClientServer).GetByCartId(ctx, req.(*GetByCartIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartClient_GetBySessionId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBySessionIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartClientServer).GetBySessionId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cart.CartClient/GetBySessionId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartClientServer).GetBySessionId(ctx, req.(*GetBySessionIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartClient_AddItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartClientServer).AddItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cart.CartClient/AddItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartClientServer).AddItem(ctx, req.(*AddItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartClient_BulkAddItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkAddItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartClientServer).BulkAddItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cart.CartClient/BulkAddItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartClientServer).BulkAddItems(ctx, req.(*BulkAddItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartClient_UpdateItemQuantity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateItemQuantityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartClientServer).UpdateItemQuantity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cart.CartClient/UpdateItemQuantity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartClientServer).UpdateItemQuantity(ctx, req.(*UpdateItemQuantityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartClient_RemoveItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartClientServer).RemoveItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cart.CartClient/RemoveItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartClientServer).RemoveItem(ctx, req.(*RemoveItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartClient_ClearCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartClientServer).ClearCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cart.CartClient/ClearCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartClientServer).ClearCart(ctx, req.(*ClearCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CartClient_ServiceDesc is the grpc.ServiceDesc for CartClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CartClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cart.CartClient",
	HandlerType: (*CartClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCart",
			Handler:    _CartClient_CreateCart_Handler,
		},
		{
			MethodName: "AttachCustomer",
			Handler:    _CartClient_AttachCustomer_Handler,
		},
		{
			MethodName: "UpdateCustomerDetail",
			Handler:    _CartClient_UpdateCustomerDetail_Handler,
		},
		{
			MethodName: "UpdateStatus",
			Handler:    _CartClient_UpdateStatus_Handler,
		},
		{
			MethodName: "GetByCartId",
			Handler:    _CartClient_GetByCartId_Handler,
		},
		{
			MethodName: "GetBySessionId",
			Handler:    _CartClient_GetBySessionId_Handler,
		},
		{
			MethodName: "AddItem",
			Handler:    _CartClient_AddItem_Handler,
		},
		{
			MethodName: "BulkAddItems",
			Handler:    _CartClient_BulkAddItems_Handler,
		},
		{
			MethodName: "UpdateItemQuantity",
			Handler:    _CartClient_UpdateItemQuantity_Handler,
		},
		{
			MethodName: "RemoveItem",
			Handler:    _CartClient_RemoveItem_Handler,
		},
		{
			MethodName: "ClearCart",
			Handler:    _CartClient_ClearCart_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cart.proto",
}
