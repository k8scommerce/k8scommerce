// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package catalog

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CatalogClientClient is the client API for CatalogClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CatalogClientClient interface {
	// categories
	GetAllCategories(ctx context.Context, in *GetAllCategoriesRequest, opts ...grpc.CallOption) (*GetAllCategoriesResponse, error)
	GetCategoryBySlug(ctx context.Context, in *GetCategoryBySlugRequest, opts ...grpc.CallOption) (*GetCategoryBySlugResponse, error)
	GetCategoryById(ctx context.Context, in *GetCategoryByIdRequest, opts ...grpc.CallOption) (*GetCategoryByIdResponse, error)
	CreateCategory(ctx context.Context, in *CreateCategoryRequest, opts ...grpc.CallOption) (*CreateCategoryResponse, error)
	UpdateCategory(ctx context.Context, in *UpdateCategoryRequest, opts ...grpc.CallOption) (*UpdateCategoryResponse, error)
	DeleteCategory(ctx context.Context, in *DeleteCategoryRequest, opts ...grpc.CallOption) (*DeleteCategoryResponse, error)
	// products
	GetProductBySku(ctx context.Context, in *GetProductBySkuRequest, opts ...grpc.CallOption) (*GetProductBySkuResponse, error)
	GetProductBySlug(ctx context.Context, in *GetProductBySlugRequest, opts ...grpc.CallOption) (*GetProductBySlugResponse, error)
	GetProductById(ctx context.Context, in *GetProductByIdRequest, opts ...grpc.CallOption) (*GetProductByIdResponse, error)
	GetProductsByCategoryId(ctx context.Context, in *GetProductsByCategoryIdRequest, opts ...grpc.CallOption) (*GetProductsByCategoryIdResponse, error)
	GetProductsByCategorySlug(ctx context.Context, in *GetProductsByCategorySlugRequest, opts ...grpc.CallOption) (*GetProductsByCategorySlugResponse, error)
	GetAllProducts(ctx context.Context, in *GetAllProductsRequest, opts ...grpc.CallOption) (*GetAllProductsResponse, error)
	CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductResponse, error)
	UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*UpdateProductResponse, error)
	DeleteProduct(ctx context.Context, in *DeleteProductRequest, opts ...grpc.CallOption) (*DeleteProductResponse, error)
	UploadAsset(ctx context.Context, opts ...grpc.CallOption) (CatalogClient_UploadAssetClient, error)
}

type catalogClientClient struct {
	cc grpc.ClientConnInterface
}

func NewCatalogClientClient(cc grpc.ClientConnInterface) CatalogClientClient {
	return &catalogClientClient{cc}
}

func (c *catalogClientClient) GetAllCategories(ctx context.Context, in *GetAllCategoriesRequest, opts ...grpc.CallOption) (*GetAllCategoriesResponse, error) {
	out := new(GetAllCategoriesResponse)
	err := c.cc.Invoke(ctx, "/catalog.CatalogClient/GetAllCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClientClient) GetCategoryBySlug(ctx context.Context, in *GetCategoryBySlugRequest, opts ...grpc.CallOption) (*GetCategoryBySlugResponse, error) {
	out := new(GetCategoryBySlugResponse)
	err := c.cc.Invoke(ctx, "/catalog.CatalogClient/GetCategoryBySlug", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClientClient) GetCategoryById(ctx context.Context, in *GetCategoryByIdRequest, opts ...grpc.CallOption) (*GetCategoryByIdResponse, error) {
	out := new(GetCategoryByIdResponse)
	err := c.cc.Invoke(ctx, "/catalog.CatalogClient/GetCategoryById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClientClient) CreateCategory(ctx context.Context, in *CreateCategoryRequest, opts ...grpc.CallOption) (*CreateCategoryResponse, error) {
	out := new(CreateCategoryResponse)
	err := c.cc.Invoke(ctx, "/catalog.CatalogClient/CreateCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClientClient) UpdateCategory(ctx context.Context, in *UpdateCategoryRequest, opts ...grpc.CallOption) (*UpdateCategoryResponse, error) {
	out := new(UpdateCategoryResponse)
	err := c.cc.Invoke(ctx, "/catalog.CatalogClient/UpdateCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClientClient) DeleteCategory(ctx context.Context, in *DeleteCategoryRequest, opts ...grpc.CallOption) (*DeleteCategoryResponse, error) {
	out := new(DeleteCategoryResponse)
	err := c.cc.Invoke(ctx, "/catalog.CatalogClient/DeleteCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClientClient) GetProductBySku(ctx context.Context, in *GetProductBySkuRequest, opts ...grpc.CallOption) (*GetProductBySkuResponse, error) {
	out := new(GetProductBySkuResponse)
	err := c.cc.Invoke(ctx, "/catalog.CatalogClient/GetProductBySku", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClientClient) GetProductBySlug(ctx context.Context, in *GetProductBySlugRequest, opts ...grpc.CallOption) (*GetProductBySlugResponse, error) {
	out := new(GetProductBySlugResponse)
	err := c.cc.Invoke(ctx, "/catalog.CatalogClient/GetProductBySlug", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClientClient) GetProductById(ctx context.Context, in *GetProductByIdRequest, opts ...grpc.CallOption) (*GetProductByIdResponse, error) {
	out := new(GetProductByIdResponse)
	err := c.cc.Invoke(ctx, "/catalog.CatalogClient/GetProductById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClientClient) GetProductsByCategoryId(ctx context.Context, in *GetProductsByCategoryIdRequest, opts ...grpc.CallOption) (*GetProductsByCategoryIdResponse, error) {
	out := new(GetProductsByCategoryIdResponse)
	err := c.cc.Invoke(ctx, "/catalog.CatalogClient/GetProductsByCategoryId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClientClient) GetProductsByCategorySlug(ctx context.Context, in *GetProductsByCategorySlugRequest, opts ...grpc.CallOption) (*GetProductsByCategorySlugResponse, error) {
	out := new(GetProductsByCategorySlugResponse)
	err := c.cc.Invoke(ctx, "/catalog.CatalogClient/GetProductsByCategorySlug", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClientClient) GetAllProducts(ctx context.Context, in *GetAllProductsRequest, opts ...grpc.CallOption) (*GetAllProductsResponse, error) {
	out := new(GetAllProductsResponse)
	err := c.cc.Invoke(ctx, "/catalog.CatalogClient/GetAllProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClientClient) CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductResponse, error) {
	out := new(CreateProductResponse)
	err := c.cc.Invoke(ctx, "/catalog.CatalogClient/CreateProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClientClient) UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*UpdateProductResponse, error) {
	out := new(UpdateProductResponse)
	err := c.cc.Invoke(ctx, "/catalog.CatalogClient/UpdateProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClientClient) DeleteProduct(ctx context.Context, in *DeleteProductRequest, opts ...grpc.CallOption) (*DeleteProductResponse, error) {
	out := new(DeleteProductResponse)
	err := c.cc.Invoke(ctx, "/catalog.CatalogClient/DeleteProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClientClient) UploadAsset(ctx context.Context, opts ...grpc.CallOption) (CatalogClient_UploadAssetClient, error) {
	stream, err := c.cc.NewStream(ctx, &CatalogClient_ServiceDesc.Streams[0], "/catalog.CatalogClient/UploadAsset", opts...)
	if err != nil {
		return nil, err
	}
	x := &catalogClientUploadAssetClient{stream}
	return x, nil
}

type CatalogClient_UploadAssetClient interface {
	Send(*UploadAssetRequest) error
	CloseAndRecv() (*Asset, error)
	grpc.ClientStream
}

type catalogClientUploadAssetClient struct {
	grpc.ClientStream
}

func (x *catalogClientUploadAssetClient) Send(m *UploadAssetRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *catalogClientUploadAssetClient) CloseAndRecv() (*Asset, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Asset)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CatalogClientServer is the server API for CatalogClient service.
// All implementations must embed UnimplementedCatalogClientServer
// for forward compatibility
type CatalogClientServer interface {
	// categories
	GetAllCategories(context.Context, *GetAllCategoriesRequest) (*GetAllCategoriesResponse, error)
	GetCategoryBySlug(context.Context, *GetCategoryBySlugRequest) (*GetCategoryBySlugResponse, error)
	GetCategoryById(context.Context, *GetCategoryByIdRequest) (*GetCategoryByIdResponse, error)
	CreateCategory(context.Context, *CreateCategoryRequest) (*CreateCategoryResponse, error)
	UpdateCategory(context.Context, *UpdateCategoryRequest) (*UpdateCategoryResponse, error)
	DeleteCategory(context.Context, *DeleteCategoryRequest) (*DeleteCategoryResponse, error)
	// products
	GetProductBySku(context.Context, *GetProductBySkuRequest) (*GetProductBySkuResponse, error)
	GetProductBySlug(context.Context, *GetProductBySlugRequest) (*GetProductBySlugResponse, error)
	GetProductById(context.Context, *GetProductByIdRequest) (*GetProductByIdResponse, error)
	GetProductsByCategoryId(context.Context, *GetProductsByCategoryIdRequest) (*GetProductsByCategoryIdResponse, error)
	GetProductsByCategorySlug(context.Context, *GetProductsByCategorySlugRequest) (*GetProductsByCategorySlugResponse, error)
	GetAllProducts(context.Context, *GetAllProductsRequest) (*GetAllProductsResponse, error)
	CreateProduct(context.Context, *CreateProductRequest) (*CreateProductResponse, error)
	UpdateProduct(context.Context, *UpdateProductRequest) (*UpdateProductResponse, error)
	DeleteProduct(context.Context, *DeleteProductRequest) (*DeleteProductResponse, error)
	UploadAsset(CatalogClient_UploadAssetServer) error
	mustEmbedUnimplementedCatalogClientServer()
}

// UnimplementedCatalogClientServer must be embedded to have forward compatible implementations.
type UnimplementedCatalogClientServer struct {
}

func (UnimplementedCatalogClientServer) GetAllCategories(context.Context, *GetAllCategoriesRequest) (*GetAllCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCategories not implemented")
}
func (UnimplementedCatalogClientServer) GetCategoryBySlug(context.Context, *GetCategoryBySlugRequest) (*GetCategoryBySlugResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryBySlug not implemented")
}
func (UnimplementedCatalogClientServer) GetCategoryById(context.Context, *GetCategoryByIdRequest) (*GetCategoryByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryById not implemented")
}
func (UnimplementedCatalogClientServer) CreateCategory(context.Context, *CreateCategoryRequest) (*CreateCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCategory not implemented")
}
func (UnimplementedCatalogClientServer) UpdateCategory(context.Context, *UpdateCategoryRequest) (*UpdateCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategory not implemented")
}
func (UnimplementedCatalogClientServer) DeleteCategory(context.Context, *DeleteCategoryRequest) (*DeleteCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCategory not implemented")
}
func (UnimplementedCatalogClientServer) GetProductBySku(context.Context, *GetProductBySkuRequest) (*GetProductBySkuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductBySku not implemented")
}
func (UnimplementedCatalogClientServer) GetProductBySlug(context.Context, *GetProductBySlugRequest) (*GetProductBySlugResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductBySlug not implemented")
}
func (UnimplementedCatalogClientServer) GetProductById(context.Context, *GetProductByIdRequest) (*GetProductByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductById not implemented")
}
func (UnimplementedCatalogClientServer) GetProductsByCategoryId(context.Context, *GetProductsByCategoryIdRequest) (*GetProductsByCategoryIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductsByCategoryId not implemented")
}
func (UnimplementedCatalogClientServer) GetProductsByCategorySlug(context.Context, *GetProductsByCategorySlugRequest) (*GetProductsByCategorySlugResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductsByCategorySlug not implemented")
}
func (UnimplementedCatalogClientServer) GetAllProducts(context.Context, *GetAllProductsRequest) (*GetAllProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllProducts not implemented")
}
func (UnimplementedCatalogClientServer) CreateProduct(context.Context, *CreateProductRequest) (*CreateProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduct not implemented")
}
func (UnimplementedCatalogClientServer) UpdateProduct(context.Context, *UpdateProductRequest) (*UpdateProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProduct not implemented")
}
func (UnimplementedCatalogClientServer) DeleteProduct(context.Context, *DeleteProductRequest) (*DeleteProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProduct not implemented")
}
func (UnimplementedCatalogClientServer) UploadAsset(CatalogClient_UploadAssetServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadAsset not implemented")
}
func (UnimplementedCatalogClientServer) mustEmbedUnimplementedCatalogClientServer() {}

// UnsafeCatalogClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CatalogClientServer will
// result in compilation errors.
type UnsafeCatalogClientServer interface {
	mustEmbedUnimplementedCatalogClientServer()
}

func RegisterCatalogClientServer(s grpc.ServiceRegistrar, srv CatalogClientServer) {
	s.RegisterService(&CatalogClient_ServiceDesc, srv)
}

func _CatalogClient_GetAllCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogClientServer).GetAllCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.CatalogClient/GetAllCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogClientServer).GetAllCategories(ctx, req.(*GetAllCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogClient_GetCategoryBySlug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryBySlugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogClientServer).GetCategoryBySlug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.CatalogClient/GetCategoryBySlug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogClientServer).GetCategoryBySlug(ctx, req.(*GetCategoryBySlugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogClient_GetCategoryById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogClientServer).GetCategoryById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.CatalogClient/GetCategoryById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogClientServer).GetCategoryById(ctx, req.(*GetCategoryByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogClient_CreateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogClientServer).CreateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.CatalogClient/CreateCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogClientServer).CreateCategory(ctx, req.(*CreateCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogClient_UpdateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogClientServer).UpdateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.CatalogClient/UpdateCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogClientServer).UpdateCategory(ctx, req.(*UpdateCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogClient_DeleteCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogClientServer).DeleteCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.CatalogClient/DeleteCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogClientServer).DeleteCategory(ctx, req.(*DeleteCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogClient_GetProductBySku_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductBySkuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogClientServer).GetProductBySku(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.CatalogClient/GetProductBySku",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogClientServer).GetProductBySku(ctx, req.(*GetProductBySkuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogClient_GetProductBySlug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductBySlugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogClientServer).GetProductBySlug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.CatalogClient/GetProductBySlug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogClientServer).GetProductBySlug(ctx, req.(*GetProductBySlugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogClient_GetProductById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogClientServer).GetProductById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.CatalogClient/GetProductById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogClientServer).GetProductById(ctx, req.(*GetProductByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogClient_GetProductsByCategoryId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductsByCategoryIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogClientServer).GetProductsByCategoryId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.CatalogClient/GetProductsByCategoryId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogClientServer).GetProductsByCategoryId(ctx, req.(*GetProductsByCategoryIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogClient_GetProductsByCategorySlug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductsByCategorySlugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogClientServer).GetProductsByCategorySlug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.CatalogClient/GetProductsByCategorySlug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogClientServer).GetProductsByCategorySlug(ctx, req.(*GetProductsByCategorySlugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogClient_GetAllProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogClientServer).GetAllProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.CatalogClient/GetAllProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogClientServer).GetAllProducts(ctx, req.(*GetAllProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogClient_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogClientServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.CatalogClient/CreateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogClientServer).CreateProduct(ctx, req.(*CreateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogClient_UpdateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogClientServer).UpdateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.CatalogClient/UpdateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogClientServer).UpdateProduct(ctx, req.(*UpdateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogClient_DeleteProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogClientServer).DeleteProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.CatalogClient/DeleteProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogClientServer).DeleteProduct(ctx, req.(*DeleteProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogClient_UploadAsset_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CatalogClientServer).UploadAsset(&catalogClientUploadAssetServer{stream})
}

type CatalogClient_UploadAssetServer interface {
	SendAndClose(*Asset) error
	Recv() (*UploadAssetRequest, error)
	grpc.ServerStream
}

type catalogClientUploadAssetServer struct {
	grpc.ServerStream
}

func (x *catalogClientUploadAssetServer) SendAndClose(m *Asset) error {
	return x.ServerStream.SendMsg(m)
}

func (x *catalogClientUploadAssetServer) Recv() (*UploadAssetRequest, error) {
	m := new(UploadAssetRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CatalogClient_ServiceDesc is the grpc.ServiceDesc for CatalogClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CatalogClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "catalog.CatalogClient",
	HandlerType: (*CatalogClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllCategories",
			Handler:    _CatalogClient_GetAllCategories_Handler,
		},
		{
			MethodName: "GetCategoryBySlug",
			Handler:    _CatalogClient_GetCategoryBySlug_Handler,
		},
		{
			MethodName: "GetCategoryById",
			Handler:    _CatalogClient_GetCategoryById_Handler,
		},
		{
			MethodName: "CreateCategory",
			Handler:    _CatalogClient_CreateCategory_Handler,
		},
		{
			MethodName: "UpdateCategory",
			Handler:    _CatalogClient_UpdateCategory_Handler,
		},
		{
			MethodName: "DeleteCategory",
			Handler:    _CatalogClient_DeleteCategory_Handler,
		},
		{
			MethodName: "GetProductBySku",
			Handler:    _CatalogClient_GetProductBySku_Handler,
		},
		{
			MethodName: "GetProductBySlug",
			Handler:    _CatalogClient_GetProductBySlug_Handler,
		},
		{
			MethodName: "GetProductById",
			Handler:    _CatalogClient_GetProductById_Handler,
		},
		{
			MethodName: "GetProductsByCategoryId",
			Handler:    _CatalogClient_GetProductsByCategoryId_Handler,
		},
		{
			MethodName: "GetProductsByCategorySlug",
			Handler:    _CatalogClient_GetProductsByCategorySlug_Handler,
		},
		{
			MethodName: "GetAllProducts",
			Handler:    _CatalogClient_GetAllProducts_Handler,
		},
		{
			MethodName: "CreateProduct",
			Handler:    _CatalogClient_CreateProduct_Handler,
		},
		{
			MethodName: "UpdateProduct",
			Handler:    _CatalogClient_UpdateProduct_Handler,
		},
		{
			MethodName: "DeleteProduct",
			Handler:    _CatalogClient_DeleteProduct_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadAsset",
			Handler:       _CatalogClient_UploadAsset_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "catalog.proto",
}
