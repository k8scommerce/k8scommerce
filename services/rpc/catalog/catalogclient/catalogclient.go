// Code generated by goctl. DO NOT EDIT!
// Source: catalog.proto

package catalogclient

import (
	"context"

	"k8scommerce/services/rpc/catalog/pb/catalog"

	"github.com/tal-tech/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateProductRequest            = catalog.CreateProductRequest
	CreateProductResponse           = catalog.CreateProductResponse
	DeleteProductRequest            = catalog.DeleteProductRequest
	DeleteProductResponse           = catalog.DeleteProductResponse
	GetAllProductsRequest           = catalog.GetAllProductsRequest
	GetAllProductsResponse          = catalog.GetAllProductsResponse
	GetProductByIdRequest           = catalog.GetProductByIdRequest
	GetProductByIdResponse          = catalog.GetProductByIdResponse
	GetProductBySkuRequest          = catalog.GetProductBySkuRequest
	GetProductBySkuResponse         = catalog.GetProductBySkuResponse
	GetProductBySlugRequest         = catalog.GetProductBySlugRequest
	GetProductBySlugResponse        = catalog.GetProductBySlugResponse
	GetProductsByCategoryIdRequest  = catalog.GetProductsByCategoryIdRequest
	GetProductsByCategoryIdResponse = catalog.GetProductsByCategoryIdResponse
	Price                           = catalog.Price
	Product                         = catalog.Product
	UpdateProductRequest            = catalog.UpdateProductRequest
	UpdateProductResponse           = catalog.UpdateProductResponse
	Variant                         = catalog.Variant

	CatalogClient interface {
		GetProductBySku(ctx context.Context, in *GetProductBySkuRequest, opts ...grpc.CallOption) (*GetProductBySkuResponse, error)
		GetProductBySlug(ctx context.Context, in *GetProductBySlugRequest, opts ...grpc.CallOption) (*GetProductBySlugResponse, error)
		GetProductById(ctx context.Context, in *GetProductByIdRequest, opts ...grpc.CallOption) (*GetProductByIdResponse, error)
		GetProductsByCategoryId(ctx context.Context, in *GetProductsByCategoryIdRequest, opts ...grpc.CallOption) (*GetProductsByCategoryIdResponse, error)
		GetAllProducts(ctx context.Context, in *GetAllProductsRequest, opts ...grpc.CallOption) (*GetAllProductsResponse, error)
		CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductResponse, error)
		UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*UpdateProductResponse, error)
		DeleteProduct(ctx context.Context, in *DeleteProductRequest, opts ...grpc.CallOption) (*DeleteProductResponse, error)
	}

	defaultCatalogClient struct {
		cli zrpc.Client
	}
)

func NewCatalogClient(cli zrpc.Client) CatalogClient {
	return &defaultCatalogClient{
		cli: cli,
	}
}

func (m *defaultCatalogClient) GetProductBySku(ctx context.Context, in *GetProductBySkuRequest, opts ...grpc.CallOption) (*GetProductBySkuResponse, error) {
	client := catalog.NewCatalogClientClient(m.cli.Conn())
	return client.GetProductBySku(ctx, in, opts...)
}

func (m *defaultCatalogClient) GetProductBySlug(ctx context.Context, in *GetProductBySlugRequest, opts ...grpc.CallOption) (*GetProductBySlugResponse, error) {
	client := catalog.NewCatalogClientClient(m.cli.Conn())
	return client.GetProductBySlug(ctx, in, opts...)
}

func (m *defaultCatalogClient) GetProductById(ctx context.Context, in *GetProductByIdRequest, opts ...grpc.CallOption) (*GetProductByIdResponse, error) {
	client := catalog.NewCatalogClientClient(m.cli.Conn())
	return client.GetProductById(ctx, in, opts...)
}

func (m *defaultCatalogClient) GetProductsByCategoryId(ctx context.Context, in *GetProductsByCategoryIdRequest, opts ...grpc.CallOption) (*GetProductsByCategoryIdResponse, error) {
	client := catalog.NewCatalogClientClient(m.cli.Conn())
	return client.GetProductsByCategoryId(ctx, in, opts...)
}

func (m *defaultCatalogClient) GetAllProducts(ctx context.Context, in *GetAllProductsRequest, opts ...grpc.CallOption) (*GetAllProductsResponse, error) {
	client := catalog.NewCatalogClientClient(m.cli.Conn())
	return client.GetAllProducts(ctx, in, opts...)
}

func (m *defaultCatalogClient) CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductResponse, error) {
	client := catalog.NewCatalogClientClient(m.cli.Conn())
	return client.CreateProduct(ctx, in, opts...)
}

func (m *defaultCatalogClient) UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*UpdateProductResponse, error) {
	client := catalog.NewCatalogClientClient(m.cli.Conn())
	return client.UpdateProduct(ctx, in, opts...)
}

func (m *defaultCatalogClient) DeleteProduct(ctx context.Context, in *DeleteProductRequest, opts ...grpc.CallOption) (*DeleteProductResponse, error) {
	client := catalog.NewCatalogClientClient(m.cli.Conn())
	return client.DeleteProduct(ctx, in, opts...)
}
