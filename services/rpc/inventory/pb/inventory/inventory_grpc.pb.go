// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package inventory

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InventoryClientClient is the client API for InventoryClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InventoryClientClient interface {
	GetItemQuantity(ctx context.Context, in *GetItemQuantityRequest, opts ...grpc.CallOption) (*GetItemQuantityResponse, error)
	GetItemsQuantity(ctx context.Context, in *GetItemsQuantityRequest, opts ...grpc.CallOption) (*GetItemsQuantityResponse, error)
}

type inventoryClientClient struct {
	cc grpc.ClientConnInterface
}

func NewInventoryClientClient(cc grpc.ClientConnInterface) InventoryClientClient {
	return &inventoryClientClient{cc}
}

func (c *inventoryClientClient) GetItemQuantity(ctx context.Context, in *GetItemQuantityRequest, opts ...grpc.CallOption) (*GetItemQuantityResponse, error) {
	out := new(GetItemQuantityResponse)
	err := c.cc.Invoke(ctx, "/inventory.InventoryClient/GetItemQuantity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClientClient) GetItemsQuantity(ctx context.Context, in *GetItemsQuantityRequest, opts ...grpc.CallOption) (*GetItemsQuantityResponse, error) {
	out := new(GetItemsQuantityResponse)
	err := c.cc.Invoke(ctx, "/inventory.InventoryClient/GetItemsQuantity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InventoryClientServer is the server API for InventoryClient service.
// All implementations must embed UnimplementedInventoryClientServer
// for forward compatibility
type InventoryClientServer interface {
	GetItemQuantity(context.Context, *GetItemQuantityRequest) (*GetItemQuantityResponse, error)
	GetItemsQuantity(context.Context, *GetItemsQuantityRequest) (*GetItemsQuantityResponse, error)
	mustEmbedUnimplementedInventoryClientServer()
}

// UnimplementedInventoryClientServer must be embedded to have forward compatible implementations.
type UnimplementedInventoryClientServer struct {
}

func (UnimplementedInventoryClientServer) GetItemQuantity(context.Context, *GetItemQuantityRequest) (*GetItemQuantityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItemQuantity not implemented")
}
func (UnimplementedInventoryClientServer) GetItemsQuantity(context.Context, *GetItemsQuantityRequest) (*GetItemsQuantityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItemsQuantity not implemented")
}
func (UnimplementedInventoryClientServer) mustEmbedUnimplementedInventoryClientServer() {}

// UnsafeInventoryClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InventoryClientServer will
// result in compilation errors.
type UnsafeInventoryClientServer interface {
	mustEmbedUnimplementedInventoryClientServer()
}

func RegisterInventoryClientServer(s grpc.ServiceRegistrar, srv InventoryClientServer) {
	s.RegisterService(&InventoryClient_ServiceDesc, srv)
}

func _InventoryClient_GetItemQuantity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemQuantityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryClientServer).GetItemQuantity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.InventoryClient/GetItemQuantity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryClientServer).GetItemQuantity(ctx, req.(*GetItemQuantityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryClient_GetItemsQuantity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemsQuantityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryClientServer).GetItemsQuantity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.InventoryClient/GetItemsQuantity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryClientServer).GetItemsQuantity(ctx, req.(*GetItemsQuantityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InventoryClient_ServiceDesc is the grpc.ServiceDesc for InventoryClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InventoryClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inventory.InventoryClient",
	HandlerType: (*InventoryClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetItemQuantity",
			Handler:    _InventoryClient_GetItemQuantity_Handler,
		},
		{
			MethodName: "GetItemsQuantity",
			Handler:    _InventoryClient_GetItemsQuantity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inventory.proto",
}
