// Code generated by goctl. DO NOT EDIT!
// Source: user.proto

package userclient

import (
	"context"

	"github.com/k8s-commerce/k8s-commerce/services/rpc/user/pb/user"

	"github.com/tal-tech/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateUserRequest  = user.CreateUserRequest
	CreateUserResponse = user.CreateUserResponse
	Group              = user.Group
	LoginRequest       = user.LoginRequest
	LoginResponse      = user.LoginResponse
	User               = user.User

	UserClient interface {
		CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
		Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	}

	defaultUserClient struct {
		cli zrpc.Client
	}
)

func NewUserClient(cli zrpc.Client) UserClient {
	return &defaultUserClient{
		cli: cli,
	}
}

func (m *defaultUserClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	client := user.NewUserClientClient(m.cli.Conn())
	return client.CreateUser(ctx, in, opts...)
}

func (m *defaultUserClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	client := user.NewUserClientClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}
