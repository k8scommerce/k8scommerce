// objects
type Category {
	Id              int64  `json:"id"`
	ParentId        int64  `json:"parentId"`
	Slug            string `json:"slug"`
	Name            string `json:"name"`
	Description     string `json:"description"`
	MetaTitle       string `json:"metaTitle"`
	MetaDescription string `json:"metaDescription"`
	MetaKeywords    string `json:"metaKeywords"`
	SortOrder       int32  `json:"sortOrder"`
}

type Product {
	Id               int64     `json:"id"`
	Slug             string    `json:"slug"`
	Name             string    `json:"name"`
	ShortDescription string    `json:"shortDescription"`
	Description      string    `json:"description"`
	MetaTitle        string    `json:"metaTitle,omitempty"`
	MetaDescription  string    `json:"metaDescription,omitempty"`
	MetaKeywords     string    `json:"metaKeywords,omitempty"`
	Variants         []Variant `json:"variants,omitempty"`
}

type Variant {
	Id        int64   `json:"id,omitempty"`
	IsDefault bool    `json:"isDefault,omitempty"`
	Sku       string  `json:"sku,omitempty"`
	Weight    float64 `json:"weight,omitempty"`
	Height    float64 `json:"height,omitempty"`
	Width     float64 `json:"width,omitempty"`
	Depth     float64 `json:"depth,omitempty"`
	Price     Price   `json:"price,omitempty"`
}

type Price {
	Id                     int64   `json:"id,omitempty"`
	Amount                 float64 `json:"amount,omitempty"`
	DisplayAmount          string  `json:"displayAmount,omitempty"`
	CompareAtAmount        float64 `json:"compareAtAmount,omitempty"`
	DisplayCompareAtAmount string  `json:"displayCompareAtAmount,omitempty"`
	Currency               string  `json:"currency,omitempty"`
}

//
// requests & responses
//
// get all categories
type GetAllCategoriesRequest {}

type GetAllCategoriesResponse {
	Categories    []Category `json:"categories,omitempty"`
	StatusCode    int64      `json:"statusCode,omitempty"`
	StatusMessage string     `json:"statusMessage,omitempty"`
}

// get category by slug
type GetCategoryBySlugRequest {
	Slug string `json:"slug,omitempty"`
}

type GetCategoryBySlugResponse {
	Category      Category `json:"category,omitempty"`
	StatusCode    int64    `json:"statusCode,omitempty"`
	StatusMessage string   `json:"statusMessage,omitempty"`
}

// get category by id
type GetCategoryByIdRequest {
	Id int64 `json:"id,omitempty"`
}

type GetCategoryByIdResponse {
	Category      Category `json:"category,omitempty"`
	StatusCode    int64    `json:"statusCode,omitempty"`
	StatusMessage string   `json:"statusMessage,omitempty"`
}

// create category
type CreateCategoryRequest {
	Category Category `json:"category,omitempty"`
}

type CreateCategoryResponse {
	Category      Category `json:"category,omitempty"`
	StatusCode    int64    `json:"statusCode,omitempty"`
	StatusMessage string   `json:"statusMessage,omitempty"`
}

// update category
type UpdateCategoryRequest {
	Id       int64    `json:"id,omitempty"`
	Category Category `json:"category,omitempty"`
}

type UpdateCategoryResponse {
	Category      Category `json:"category,omitempty"`
	StatusCode    int64    `json:"statusCode,omitempty"`
	StatusMessage string   `json:"statusMessage,omitempty"`
}

// delete category
type DeleteCategoryRequest {
	Id int64 `json:"id,omitempty"`
}

type DeleteCategoryResponse {
	StatusCode    int64  `json:"statusCode,omitempty"`
	StatusMessage string `json:"statusMessage,omitempty"`
}

//
//
// Products
//
//

// get product by sku
type GetProductBySkuRequest {
	Sku string `path:"sku"`
}

// get product by slug
type GetProductBySlugRequest {
	Slug string `path:"slug"`
}

// get product by id
type GetProductByIdRequest {
	Id int64 `path:"id"`
}

// get products by category id
type GetProductsByCategoryIdRequest {
	CategoryId  int64  `path:"categoryId"`
	CurrentPage int64  `path:"currentPage"`
	PageSize    int64  `path:"pageSize"`
	SortOn      string `form:"sortOn,optional"`
}

type GetProductsByCategoryIdResponse {
	Products     []Product `json:"products"`
	TotalRecords int64     `json:"totalRecords"`
	TotalPages   int64     `json:"totalPages"`
}

// get all products
type GetAllProductsRequest {
	CurrentPage int64  `path:"currentPage"`
	PageSize    int64  `path:"pageSize"`
	SortOn      string `form:"sortOn"`
}

type GetAllProductsResponse {
	Products     []Product `json:"products"`
	TotalRecords int64     `json:"totalRecords"`
	TotalPages   int64     `json:"totalPages"`
}

// create product
type CreateProductRequest {
	Product Product `json:"product:omitempty"`
}

type CreateProductResponse {
	Product       Product `json:"product:omitempty"`
	StatusCode    int64   `json:"statusCode:omitempty"`
	StatusMessage string  `json:"statusMessage:omitempty"`
}

// update product
type UpdateProductRequest {
	Id      int64   `json:"path:omitempty"`
	Product Product `json:"product:omitempty"`
}

type UpdateProductResponse {
	Product       Product `json:"product:omitempty"`
	StatusCode    int64   `json:"statusCode:omitempty"`
	StatusMessage string  `json:"statusMessage:omitempty"`
}

// delete product
type DeleteProductRequest {
	Id int64 `json:"path:omitempty"`
}

type DeleteProductResponse {
	StatusCode    int64  `json:"statusCode:omitempty"`
	StatusMessage string `json:"statusMessage:omitempty"`
}

//
// endpoints
//

@server(
	middleware: Locale, StoreKey
)
service client {
	// categories
	@handler getAllCategories
	get /v1/categories(GetAllCategoriesRequest) returns (GetAllCategoriesResponse)
	
	@handler getCategoryBySlug
	get /v1/category/slug/:slug(GetCategoryBySlugRequest) returns (GetCategoryBySlugResponse)
	
	@handler getCategoryById
	get /v1/category/:id(GetCategoryByIdRequest) returns (GetCategoryByIdResponse)
	
	// products
	@handler getProductBySku
	get /v1/product/sku/:sku(GetProductBySkuRequest) returns (Product)
	
	@handler getProductBySlug
	get /v1/product/slug/:slug(GetProductBySlugRequest) returns (Product)
	
	@handler getProductById
	get /v1/product/:id(GetProductByIdRequest) returns (Product)
	
	@handler getProductsByCategoryId
	get /v1/products/category/:categoryId/:currentPage/:pageSize(GetProductsByCategoryIdRequest) returns (GetProductsByCategoryIdResponse)
	
	@handler getAllProducts
	get /v1/products/:currentPage/:pageSize(GetAllProductsRequest) returns (GetAllProductsResponse)
}

@server(
	jwt: Auth
	middleware: Locale, StoreKey
)
service client {
	
	@handler createCategory
	post /v1/category(CreateCategoryRequest) returns (CreateCategoryResponse)
	
	@handler updateCategory
	put /v1/category/:id(UpdateCategoryRequest) returns (UpdateCategoryResponse)
	
	@handler deleteCategory
	delete /v1/category/:id(DeleteCategoryRequest) returns (DeleteCategoryResponse)
	
	@handler createProduct
	post /v1/product(CreateProductRequest) returns (CreateProductResponse)
	
	@handler updateProduct
	put /v1/product/:id(UpdateProductRequest) returns (UpdateProductResponse)
	
	@handler deleteProduct
	delete /v1/product/:id(DeleteProductRequest) returns (DeleteProductResponse)
}