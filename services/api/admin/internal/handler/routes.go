// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	api "k8scommerce/services/api/admin/internal/handler/api"
	assets "k8scommerce/services/api/admin/internal/handler/assets"
	cart "k8scommerce/services/api/admin/internal/handler/cart"
	categories "k8scommerce/services/api/admin/internal/handler/categories"
	customers "k8scommerce/services/api/admin/internal/handler/customers"
	products "k8scommerce/services/api/admin/internal/handler/products"
	store "k8scommerce/services/api/admin/internal/handler/store"
	users "k8scommerce/services/api/admin/internal/handler/users"
	"k8scommerce/services/api/admin/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Locale},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/v1/api/ping",
					Handler: api.PingHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Locale, serverCtx.StoreKey},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/v1/cart",
					Handler: cart.CreateCartHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/v1/cart/:cart_id/customer",
					Handler: cart.AttachCustomerHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/v1/cart/:cart_id/customer",
					Handler: cart.UpdateCustomerDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/v1/cart/:cart_id/status",
					Handler: cart.UpdateStatusHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/v1/cart/:cart_id",
					Handler: cart.GetByCartIdHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/v1/cart/:cart_id/:session_id",
					Handler: cart.GetBySessionIdHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/v1/cart/:cart_id",
					Handler: cart.AddItemHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/v1/cart/:cart_id/bulk",
					Handler: cart.BulkAddItemsHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/v1/cart/:cart_id/:sku",
					Handler: cart.UpdateItemQuantityHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/v1/cart/:cart_id/:sku",
					Handler: cart.RemoveItemHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/v1/cart/:cart_id",
					Handler: cart.ClearCartHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Locale, serverCtx.StoreKey},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/v1/categories",
					Handler: categories.GetAllCategoriesHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/v1/category/slug/:slug",
					Handler: categories.GetCategoryBySlugHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/v1/category/:id",
					Handler: categories.GetCategoryByIdHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/v1/category",
					Handler: categories.CreateCategoryHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/v1/category/:id",
					Handler: categories.UpdateCategoryHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/v1/category/:id",
					Handler: categories.DeleteCategoryHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Locale, serverCtx.Filter, serverCtx.StoreKey},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/v1/product/sku/:sku",
					Handler: products.GetProductBySkuHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/v1/product/slug/:slug",
					Handler: products.GetProductBySlugHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/v1/product/:id",
					Handler: products.GetProductByIdHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/v1/products/:category_id/:current_page/:page_size",
					Handler: products.GetProductsByCategoryIdHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/v1/products/:current_page/:page_size",
					Handler: products.GetAllProductsHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/v1/product",
					Handler: products.CreateProductHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/v1/product/:id",
					Handler: products.UpdateProductHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/v1/product/:id",
					Handler: products.DeleteProductHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Locale, serverCtx.Filter, serverCtx.StoreKey},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/v1/asset/:product_id/:variant_id/:kind",
					Handler: assets.UploadHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Locale, serverCtx.StoreKey},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/v1/customer/email",
					Handler: customers.CheckForExistingEmailHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/v1/customer",
					Handler: customers.CreateCustomerHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/v1/customer/login",
					Handler: customers.LoginHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Locale, serverCtx.StoreKey},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/v1/customer/:id",
					Handler: customers.GetCustomerHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Locale},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/v1/store/generate-token/:store_id",
					Handler: store.GenerateStoreKeyTokenHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Locale},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/v1/user/login",
					Handler: users.LoginHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Locale},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/v1/users/:current_page/:page_size",
					Handler: users.GetAllUsersHandler(serverCtx),
				},
			}...,
		),
	)
}
