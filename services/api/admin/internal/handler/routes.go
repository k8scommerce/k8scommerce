// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	Categories "k8scommerce/services/api/admin/internal/handler/Categories"
	Customers "k8scommerce/services/api/admin/internal/handler/Customers"
	Products "k8scommerce/services/api/admin/internal/handler/Products"
	Users "k8scommerce/services/api/admin/internal/handler/Users"
	"k8scommerce/services/api/admin/internal/svc"

	"github.com/tal-tech/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Locale},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/v1/categories/:storeId/:currentPage/:pageSize",
					Handler: Categories.GetAllCategoriesHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/v1/category/slug/:slug",
					Handler: Categories.GetCategoryBySlugHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/v1/category/:id",
					Handler: Categories.GetCategoryByIdHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/v1/category",
					Handler: Categories.CreateCategoryHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/v1/category/:id",
					Handler: Categories.UpdateCategoryHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/v1/category/:id",
					Handler: Categories.DeleteCategoryHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Locale},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/v1/product/sku/:sku",
					Handler: Products.GetProductBySkuHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/v1/product/slug/:slug",
					Handler: Products.GetProductBySlugHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/v1/product/:id",
					Handler: Products.GetProductByIdHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/v1/products/:categoryId/:currentPage/:pageSize",
					Handler: Products.GetProductsByCategoryIdHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/v1/products/:currentPage/:pageSize",
					Handler: Products.GetAllProductsHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/v1/product",
					Handler: Products.CreateProductHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/v1/product/:id",
					Handler: Products.UpdateProductHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/v1/product/:id",
					Handler: Products.DeleteProductHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Locale},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/v1/customer",
					Handler: Customers.CreateCustomerHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/v1/customer/login",
					Handler: Customers.CustomerLoginHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Locale},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/v1/user/login",
					Handler: Users.LoginHandler(serverCtx),
				},
			}...,
		),
	)
}
