// Code generated by goctl. DO NOT EDIT.
package types

type JwtToken struct {
	AccessToken  string `json:"access_token"`
	AccessExpire int64  `json:"access_expire"`
	RefreshAfter int64  `json:"refresh_after"`
}

type ResponseStatus struct {
	StatusCode    int64  `json:"statusCode"`    // RFC http status code, ie. 204, etc - https://go.dev/src/net/http/status.go
	StatusMessage string `json:"statusMessage"` // status message
}

type Cart struct {
	Item       []Item  `json:"items"`      // a collection of Item
	TotalPrice float64 `json:"totalPrice"` // the sum total of the cart
}

type Item struct {
	Sku       string  `json:"sku"`       // an item's variant sku number
	Quantity  int32   `json:"quantity"`  // how many of identical items
	Price     float64 `json:"price"`     // the item's price
	ExpiresAt string  `json:"expiresAt"` // when this item expires in the cart
}

type GetCartRequest struct {
	CustomerId int64 `path:"customerId"` // a customer's id
}

type GetCartResponse struct {
	Cart           Cart           `json:"cart"`   // a Cart object
	ResponseStatus ResponseStatus `json:"status"` // a ResponseStatus object
}

type AddItemToCartRequest struct {
	CustomerId int64 `path:"customerId"` // a customer's id
	Item       Item  `json:"item"`       // an Item object
}

type AddItemToCartResponse struct {
	Cart           Cart           `json:"cart"`   // a Cart object
	ResponseStatus ResponseStatus `json:"status"` // a ResponseStatus object
}

type UpdateCartItemQuantityRequest struct {
	CustomerId int64  `path:"customerId"` // a customer's id
	Sku        string `path:"sku"`        // an item's variant sku number
	Quanity    int32  `json:"quanity"`    // a new quantity
}

type UpdateCartItemQuantityResponse struct {
	Cart           Cart           `json:"cart"`   // a Cart object
	ResponseStatus ResponseStatus `json:"status"` // a ResponseStatus object
}

type RemoveCartItemRequest struct {
	CustomerId int64  `path:"customerId"` // a customer's id
	Sku        string `path:"sku"`        // an item's variant sku number
	Quanity    int32  `json:"quanity"`    // a new quantity
}

type RemoveCartItemResponse struct {
	Cart           Cart           `json:"cart"`   // a Cart object
	ResponseStatus ResponseStatus `json:"status"` // a ResponseStatus object
}

type ClearCartRequest struct {
	CustomerId     int64          `path:"customerId"` // a customer's id
	ResponseStatus ResponseStatus `json:"status"`     // a ResponseStatus object
}

type ClearCartResponse struct {
	ResponseStatus ResponseStatus `json:"status"` // a ResponseStatus object
}

type Category struct {
	Id              int64  `json:"id"`                        // category id
	ParentId        int64  `json:"parentId"`                  // parent category id. references Category.Id
	Slug            string `json:"slug"`                      // slug name of the category
	Name            string `json:"name"`                      // name of category
	Description     string `json:"description"`               // description of category
	MetaTitle       string `json:"metaTitle,omitempty"`       // metatag title for SEO
	MetaDescription string `json:"metaDescription,omitempty"` // metatag description for SEO
	MetaKeywords    string `json:"metaKeywords,omitempty"`    // metatag keywords for SEO
	SortOrder       int32  `json:"sortOrder"`                 // sort order of menu items on the same level and same parent id
}

type Product struct {
	Id               int64     `json:"id"`                        // product id
	Slug             string    `json:"slug"`                      // product slug
	Name             string    `json:"name"`                      // product name
	ShortDescription string    `json:"shortDescription"`          // product short description. used in category pages
	Description      string    `json:"description"`               // category description
	MetaTitle        string    `json:"metaTitle,omitempty"`       // metatag title for SEO
	MetaDescription  string    `json:"metaDescription,omitempty"` // metatag description for SEO
	MetaKeywords     string    `json:"metaKeywords,omitempty"`    // metatag keywords for SEO
	Variants         []Variant `json:"variants,omitempty"`        // collection of Variant objects
}

type Variant struct {
	Id        int64   `json:"id,omitempty"`        // variant id
	IsDefault bool    `json:"isDefault,omitempty"` // is default variant. each product must have exactly 1 default variant
	Sku       string  `json:"sku,omitempty"`       // variant sku. usually the product sku with appended identification tags
	Weight    float64 `json:"weight,omitempty"`    // variant weight. used in calculating shipping
	Height    float64 `json:"height,omitempty"`    // variant height. used in calculating shipping
	Width     float64 `json:"width,omitempty"`     // variant width. used in calculating shipping
	Depth     float64 `json:"depth,omitempty"`     // variant depth. used in calculating shipping
	Price     Price   `json:"price,omitempty"`     // variant Price object
}

type Price struct {
	Id                     int64   `json:"id,omitempty"`                     // price id
	Amount                 float64 `json:"amount,omitempty"`                 // price amount
	DisplayAmount          string  `json:"displayAmount,omitempty"`          // price display amount
	CompareAtAmount        float64 `json:"compareAtAmount,omitempty"`        // price compare amount
	DisplayCompareAtAmount string  `json:"displayCompareAtAmount,omitempty"` // price display compare amount
	Currency               string  `json:"currency,omitempty"`               // price currency. example: USD, CAN, etc.
}

type GetAllCategoriesResponse struct {
	Categories     []Category     `json:"categories,omitempty"` // a collection of Category
	ResponseStatus ResponseStatus `json:"status"`               // a ResponseStatus object
}

type GetCategoryBySlugRequest struct {
	Slug string `json:"slug,omitempty"` // slug name of the category
}

type GetCategoryBySlugResponse struct {
	Category       Category       `json:"category,omitempty"`
	ResponseStatus ResponseStatus `json:"status"` // a ResponseStatus object
}

type GetCategoryByIdRequest struct {
	Id int64 `json:"id,omitempty"`
}

type GetCategoryByIdResponse struct {
	Category       Category       `json:"category,omitempty"`
	ResponseStatus ResponseStatus `json:"status"` // a ResponseStatus object
}

type GetProductBySkuRequest struct {
	Sku string `path:"sku"`
}

type GetProductBySlugRequest struct {
	Slug           string         `path:"slug"`   // slug name of the category
	ResponseStatus ResponseStatus `json:"status"` // a ResponseStatus object
}

type GetProductByIdRequest struct {
	Id int64 `path:"id"`
}

type GetProductsByCategoryIdRequest struct {
	CategoryId  int64  `path:"categoryId"`
	CurrentPage int64  `path:"currentPage"`
	PageSize    int64  `path:"pageSize"`
	SortOn      string `form:"sortOn,optional"`
}

type GetProductsByCategoryIdResponse struct {
	Products       []Product      `json:"products"`
	TotalRecords   int64          `json:"totalRecords"`
	TotalPages     int64          `json:"totalPages"`
	ResponseStatus ResponseStatus `json:"status"` // a ResponseStatus object
}

type GetAllProductsRequest struct {
	CurrentPage int64  `path:"currentPage"`
	PageSize    int64  `path:"pageSize"`
	SortOn      string `form:"sortOn"`
}

type GetAllProductsResponse struct {
	Products       []Product      `json:"products"`
	TotalRecords   int64          `json:"totalRecords"`
	TotalPages     int64          `json:"totalPages"`
	ResponseStatus ResponseStatus `json:"status"` // a ResponseStatus object
}

type Customer struct {
	Id        int64  `json:"id"`
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
	Email     string `json:"email"`
	Password  string `json:"password,omitempty"`
}

type CustomerLoginRequest struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type CustomerLoginResponse struct {
	JwtToken       JwtToken       `json:"jwt"`
	Customer       Customer       `json:"customer"`
	ResponseStatus ResponseStatus `json:"status"` // a ResponseStatus object
}
