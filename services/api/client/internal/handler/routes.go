// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	cart "k8scommerce/services/api/client/internal/handler/cart"
	categories "k8scommerce/services/api/client/internal/handler/categories"
	customers "k8scommerce/services/api/client/internal/handler/customers"
	products "k8scommerce/services/api/client/internal/handler/products"
	"k8scommerce/services/api/client/internal/svc"

	"github.com/tal-tech/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Locale, serverCtx.StoreKey},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/v1/cart/:customerId",
					Handler: cart.GetCartHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/v1/cart/:customerId",
					Handler: cart.AddItemToCartHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/v1/cart/:customerId/:sku",
					Handler: cart.UpdateCartItemQuantityHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/v1/cart/:customerId/:sku",
					Handler: cart.RemoveCartItemHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/v1/cart/:customerId",
					Handler: cart.ClearCartHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Locale, serverCtx.StoreKey},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/v1/categories",
					Handler: categories.GetAllCategoriesHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/v1/category/slug/:slug",
					Handler: categories.GetCategoryBySlugHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/v1/category/:id",
					Handler: categories.GetCategoryByIdHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Locale, serverCtx.StoreKey},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/v1/product/sku/:sku",
					Handler: products.GetProductBySkuHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/v1/product/slug/:slug",
					Handler: products.GetProductBySlugHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/v1/product/:id",
					Handler: products.GetProductByIdHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/v1/products/:categoryId/:currentPage/:pageSize",
					Handler: products.GetProductsByCategoryIdHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/v1/products/:currentPage/:pageSize",
					Handler: products.GetAllProductsHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Locale, serverCtx.StoreKey},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/v1/customer",
					Handler: customers.CreateCustomerHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/v1/customer/login",
					Handler: customers.CustomerLoginHandler(serverCtx),
				},
			}...,
		),
	)
}
